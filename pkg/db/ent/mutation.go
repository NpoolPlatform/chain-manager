// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/appcoin"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/coinbase"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/coinextra"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/exchangerate"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/tran"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppCoin      = "AppCoin"
	TypeCoinBase     = "CoinBase"
	TypeCoinExtra    = "CoinExtra"
	TypeExchangeRate = "ExchangeRate"
	TypeTran         = "Tran"
)

// AppCoinMutation represents an operation that mutates the AppCoin nodes in the graph.
type AppCoinMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	created_at                  *uint32
	addcreated_at               *int32
	updated_at                  *uint32
	addupdated_at               *int32
	deleted_at                  *uint32
	adddeleted_at               *int32
	app_id                      *uuid.UUID
	coin_type_id                *uuid.UUID
	name                        *string
	logo                        *string
	for_pay                     *bool
	withdraw_auto_review_amount *decimal.Decimal
	clearedFields               map[string]struct{}
	done                        bool
	oldValue                    func(context.Context) (*AppCoin, error)
	predicates                  []predicate.AppCoin
}

var _ ent.Mutation = (*AppCoinMutation)(nil)

// appcoinOption allows management of the mutation configuration using functional options.
type appcoinOption func(*AppCoinMutation)

// newAppCoinMutation creates new mutation for the AppCoin entity.
func newAppCoinMutation(c config, op Op, opts ...appcoinOption) *AppCoinMutation {
	m := &AppCoinMutation{
		config:        c,
		op:            op,
		typ:           TypeAppCoin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppCoinID sets the ID field of the mutation.
func withAppCoinID(id uuid.UUID) appcoinOption {
	return func(m *AppCoinMutation) {
		var (
			err   error
			once  sync.Once
			value *AppCoin
		)
		m.oldValue = func(ctx context.Context) (*AppCoin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppCoin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppCoin sets the old AppCoin of the mutation.
func withAppCoin(node *AppCoin) appcoinOption {
	return func(m *AppCoinMutation) {
		m.oldValue = func(context.Context) (*AppCoin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppCoinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppCoinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppCoin entities.
func (m *AppCoinMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppCoinMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppCoinMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppCoin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppCoinMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppCoinMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AppCoinMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AppCoinMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppCoinMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppCoinMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppCoinMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AppCoinMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AppCoinMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppCoinMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AppCoinMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AppCoinMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AppCoinMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AppCoinMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AppCoinMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *AppCoinMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppCoinMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AppCoinMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[appcoin.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AppCoinMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppCoinMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, appcoin.FieldAppID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *AppCoinMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *AppCoinMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *AppCoinMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[appcoin.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *AppCoinMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *AppCoinMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, appcoin.FieldCoinTypeID)
}

// SetName sets the "name" field.
func (m *AppCoinMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AppCoinMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *AppCoinMutation) ClearName() {
	m.name = nil
	m.clearedFields[appcoin.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *AppCoinMutation) NameCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *AppCoinMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, appcoin.FieldName)
}

// SetLogo sets the "logo" field.
func (m *AppCoinMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *AppCoinMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *AppCoinMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[appcoin.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *AppCoinMutation) LogoCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *AppCoinMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, appcoin.FieldLogo)
}

// SetForPay sets the "for_pay" field.
func (m *AppCoinMutation) SetForPay(b bool) {
	m.for_pay = &b
}

// ForPay returns the value of the "for_pay" field in the mutation.
func (m *AppCoinMutation) ForPay() (r bool, exists bool) {
	v := m.for_pay
	if v == nil {
		return
	}
	return *v, true
}

// OldForPay returns the old "for_pay" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldForPay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForPay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForPay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForPay: %w", err)
	}
	return oldValue.ForPay, nil
}

// ClearForPay clears the value of the "for_pay" field.
func (m *AppCoinMutation) ClearForPay() {
	m.for_pay = nil
	m.clearedFields[appcoin.FieldForPay] = struct{}{}
}

// ForPayCleared returns if the "for_pay" field was cleared in this mutation.
func (m *AppCoinMutation) ForPayCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldForPay]
	return ok
}

// ResetForPay resets all changes to the "for_pay" field.
func (m *AppCoinMutation) ResetForPay() {
	m.for_pay = nil
	delete(m.clearedFields, appcoin.FieldForPay)
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) SetWithdrawAutoReviewAmount(d decimal.Decimal) {
	m.withdraw_auto_review_amount = &d
}

// WithdrawAutoReviewAmount returns the value of the "withdraw_auto_review_amount" field in the mutation.
func (m *AppCoinMutation) WithdrawAutoReviewAmount() (r decimal.Decimal, exists bool) {
	v := m.withdraw_auto_review_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawAutoReviewAmount returns the old "withdraw_auto_review_amount" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldWithdrawAutoReviewAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawAutoReviewAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawAutoReviewAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawAutoReviewAmount: %w", err)
	}
	return oldValue.WithdrawAutoReviewAmount, nil
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) ClearWithdrawAutoReviewAmount() {
	m.withdraw_auto_review_amount = nil
	m.clearedFields[appcoin.FieldWithdrawAutoReviewAmount] = struct{}{}
}

// WithdrawAutoReviewAmountCleared returns if the "withdraw_auto_review_amount" field was cleared in this mutation.
func (m *AppCoinMutation) WithdrawAutoReviewAmountCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldWithdrawAutoReviewAmount]
	return ok
}

// ResetWithdrawAutoReviewAmount resets all changes to the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) ResetWithdrawAutoReviewAmount() {
	m.withdraw_auto_review_amount = nil
	delete(m.clearedFields, appcoin.FieldWithdrawAutoReviewAmount)
}

// Where appends a list predicates to the AppCoinMutation builder.
func (m *AppCoinMutation) Where(ps ...predicate.AppCoin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppCoinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppCoin).
func (m *AppCoinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppCoinMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, appcoin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appcoin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, appcoin.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, appcoin.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, appcoin.FieldCoinTypeID)
	}
	if m.name != nil {
		fields = append(fields, appcoin.FieldName)
	}
	if m.logo != nil {
		fields = append(fields, appcoin.FieldLogo)
	}
	if m.for_pay != nil {
		fields = append(fields, appcoin.FieldForPay)
	}
	if m.withdraw_auto_review_amount != nil {
		fields = append(fields, appcoin.FieldWithdrawAutoReviewAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppCoinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.CreatedAt()
	case appcoin.FieldUpdatedAt:
		return m.UpdatedAt()
	case appcoin.FieldDeletedAt:
		return m.DeletedAt()
	case appcoin.FieldAppID:
		return m.AppID()
	case appcoin.FieldCoinTypeID:
		return m.CoinTypeID()
	case appcoin.FieldName:
		return m.Name()
	case appcoin.FieldLogo:
		return m.Logo()
	case appcoin.FieldForPay:
		return m.ForPay()
	case appcoin.FieldWithdrawAutoReviewAmount:
		return m.WithdrawAutoReviewAmount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppCoinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appcoin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appcoin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case appcoin.FieldAppID:
		return m.OldAppID(ctx)
	case appcoin.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case appcoin.FieldName:
		return m.OldName(ctx)
	case appcoin.FieldLogo:
		return m.OldLogo(ctx)
	case appcoin.FieldForPay:
		return m.OldForPay(ctx)
	case appcoin.FieldWithdrawAutoReviewAmount:
		return m.OldWithdrawAutoReviewAmount(ctx)
	}
	return nil, fmt.Errorf("unknown AppCoin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCoinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcoin.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appcoin.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appcoin.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case appcoin.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcoin.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case appcoin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case appcoin.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case appcoin.FieldForPay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForPay(v)
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawAutoReviewAmount(v)
		return nil
	}
	return fmt.Errorf("unknown AppCoin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppCoinMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, appcoin.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, appcoin.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, appcoin.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppCoinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.AddedCreatedAt()
	case appcoin.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case appcoin.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCoinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcoin.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case appcoin.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case appcoin.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCoin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppCoinMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(appcoin.FieldAppID) {
		fields = append(fields, appcoin.FieldAppID)
	}
	if m.FieldCleared(appcoin.FieldCoinTypeID) {
		fields = append(fields, appcoin.FieldCoinTypeID)
	}
	if m.FieldCleared(appcoin.FieldName) {
		fields = append(fields, appcoin.FieldName)
	}
	if m.FieldCleared(appcoin.FieldLogo) {
		fields = append(fields, appcoin.FieldLogo)
	}
	if m.FieldCleared(appcoin.FieldForPay) {
		fields = append(fields, appcoin.FieldForPay)
	}
	if m.FieldCleared(appcoin.FieldWithdrawAutoReviewAmount) {
		fields = append(fields, appcoin.FieldWithdrawAutoReviewAmount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppCoinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppCoinMutation) ClearField(name string) error {
	switch name {
	case appcoin.FieldAppID:
		m.ClearAppID()
		return nil
	case appcoin.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case appcoin.FieldName:
		m.ClearName()
		return nil
	case appcoin.FieldLogo:
		m.ClearLogo()
		return nil
	case appcoin.FieldForPay:
		m.ClearForPay()
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		m.ClearWithdrawAutoReviewAmount()
		return nil
	}
	return fmt.Errorf("unknown AppCoin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppCoinMutation) ResetField(name string) error {
	switch name {
	case appcoin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appcoin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appcoin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case appcoin.FieldAppID:
		m.ResetAppID()
		return nil
	case appcoin.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case appcoin.FieldName:
		m.ResetName()
		return nil
	case appcoin.FieldLogo:
		m.ResetLogo()
		return nil
	case appcoin.FieldForPay:
		m.ResetForPay()
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		m.ResetWithdrawAutoReviewAmount()
		return nil
	}
	return fmt.Errorf("unknown AppCoin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppCoinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppCoinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppCoinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppCoinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppCoinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppCoinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppCoinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppCoin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppCoinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppCoin edge %s", name)
}

// CoinBaseMutation represents an operation that mutates the CoinBase nodes in the graph.
type CoinBaseMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	name            *string
	logo            *string
	presale         *bool
	unit            *string
	env             *string
	reserved_amount *decimal.Decimal
	for_pay         *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*CoinBase, error)
	predicates      []predicate.CoinBase
}

var _ ent.Mutation = (*CoinBaseMutation)(nil)

// coinbaseOption allows management of the mutation configuration using functional options.
type coinbaseOption func(*CoinBaseMutation)

// newCoinBaseMutation creates new mutation for the CoinBase entity.
func newCoinBaseMutation(c config, op Op, opts ...coinbaseOption) *CoinBaseMutation {
	m := &CoinBaseMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinBaseID sets the ID field of the mutation.
func withCoinBaseID(id uuid.UUID) coinbaseOption {
	return func(m *CoinBaseMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinBase
		)
		m.oldValue = func(ctx context.Context) (*CoinBase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinBase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinBase sets the old CoinBase of the mutation.
func withCoinBase(node *CoinBase) coinbaseOption {
	return func(m *CoinBaseMutation) {
		m.oldValue = func(context.Context) (*CoinBase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinBaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinBaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinBase entities.
func (m *CoinBaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinBaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinBaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinBase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinBaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinBaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinBaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinBaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinBaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinBaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinBaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinBaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinBaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinBaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinBaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinBaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinBaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinBaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinBaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *CoinBaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinBaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CoinBaseMutation) ClearName() {
	m.name = nil
	m.clearedFields[coinbase.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CoinBaseMutation) NameCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CoinBaseMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, coinbase.FieldName)
}

// SetLogo sets the "logo" field.
func (m *CoinBaseMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *CoinBaseMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *CoinBaseMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[coinbase.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *CoinBaseMutation) LogoCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *CoinBaseMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, coinbase.FieldLogo)
}

// SetPresale sets the "presale" field.
func (m *CoinBaseMutation) SetPresale(b bool) {
	m.presale = &b
}

// Presale returns the value of the "presale" field in the mutation.
func (m *CoinBaseMutation) Presale() (r bool, exists bool) {
	v := m.presale
	if v == nil {
		return
	}
	return *v, true
}

// OldPresale returns the old "presale" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldPresale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPresale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPresale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPresale: %w", err)
	}
	return oldValue.Presale, nil
}

// ClearPresale clears the value of the "presale" field.
func (m *CoinBaseMutation) ClearPresale() {
	m.presale = nil
	m.clearedFields[coinbase.FieldPresale] = struct{}{}
}

// PresaleCleared returns if the "presale" field was cleared in this mutation.
func (m *CoinBaseMutation) PresaleCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldPresale]
	return ok
}

// ResetPresale resets all changes to the "presale" field.
func (m *CoinBaseMutation) ResetPresale() {
	m.presale = nil
	delete(m.clearedFields, coinbase.FieldPresale)
}

// SetUnit sets the "unit" field.
func (m *CoinBaseMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *CoinBaseMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ClearUnit clears the value of the "unit" field.
func (m *CoinBaseMutation) ClearUnit() {
	m.unit = nil
	m.clearedFields[coinbase.FieldUnit] = struct{}{}
}

// UnitCleared returns if the "unit" field was cleared in this mutation.
func (m *CoinBaseMutation) UnitCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldUnit]
	return ok
}

// ResetUnit resets all changes to the "unit" field.
func (m *CoinBaseMutation) ResetUnit() {
	m.unit = nil
	delete(m.clearedFields, coinbase.FieldUnit)
}

// SetEnv sets the "env" field.
func (m *CoinBaseMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *CoinBaseMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ClearEnv clears the value of the "env" field.
func (m *CoinBaseMutation) ClearEnv() {
	m.env = nil
	m.clearedFields[coinbase.FieldEnv] = struct{}{}
}

// EnvCleared returns if the "env" field was cleared in this mutation.
func (m *CoinBaseMutation) EnvCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldEnv]
	return ok
}

// ResetEnv resets all changes to the "env" field.
func (m *CoinBaseMutation) ResetEnv() {
	m.env = nil
	delete(m.clearedFields, coinbase.FieldEnv)
}

// SetReservedAmount sets the "reserved_amount" field.
func (m *CoinBaseMutation) SetReservedAmount(d decimal.Decimal) {
	m.reserved_amount = &d
}

// ReservedAmount returns the value of the "reserved_amount" field in the mutation.
func (m *CoinBaseMutation) ReservedAmount() (r decimal.Decimal, exists bool) {
	v := m.reserved_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldReservedAmount returns the old "reserved_amount" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldReservedAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReservedAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReservedAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReservedAmount: %w", err)
	}
	return oldValue.ReservedAmount, nil
}

// ClearReservedAmount clears the value of the "reserved_amount" field.
func (m *CoinBaseMutation) ClearReservedAmount() {
	m.reserved_amount = nil
	m.clearedFields[coinbase.FieldReservedAmount] = struct{}{}
}

// ReservedAmountCleared returns if the "reserved_amount" field was cleared in this mutation.
func (m *CoinBaseMutation) ReservedAmountCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldReservedAmount]
	return ok
}

// ResetReservedAmount resets all changes to the "reserved_amount" field.
func (m *CoinBaseMutation) ResetReservedAmount() {
	m.reserved_amount = nil
	delete(m.clearedFields, coinbase.FieldReservedAmount)
}

// SetForPay sets the "for_pay" field.
func (m *CoinBaseMutation) SetForPay(b bool) {
	m.for_pay = &b
}

// ForPay returns the value of the "for_pay" field in the mutation.
func (m *CoinBaseMutation) ForPay() (r bool, exists bool) {
	v := m.for_pay
	if v == nil {
		return
	}
	return *v, true
}

// OldForPay returns the old "for_pay" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldForPay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForPay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForPay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForPay: %w", err)
	}
	return oldValue.ForPay, nil
}

// ClearForPay clears the value of the "for_pay" field.
func (m *CoinBaseMutation) ClearForPay() {
	m.for_pay = nil
	m.clearedFields[coinbase.FieldForPay] = struct{}{}
}

// ForPayCleared returns if the "for_pay" field was cleared in this mutation.
func (m *CoinBaseMutation) ForPayCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldForPay]
	return ok
}

// ResetForPay resets all changes to the "for_pay" field.
func (m *CoinBaseMutation) ResetForPay() {
	m.for_pay = nil
	delete(m.clearedFields, coinbase.FieldForPay)
}

// Where appends a list predicates to the CoinBaseMutation builder.
func (m *CoinBaseMutation) Where(ps ...predicate.CoinBase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinBaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinBase).
func (m *CoinBaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinBaseMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, coinbase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coinbase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coinbase.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, coinbase.FieldName)
	}
	if m.logo != nil {
		fields = append(fields, coinbase.FieldLogo)
	}
	if m.presale != nil {
		fields = append(fields, coinbase.FieldPresale)
	}
	if m.unit != nil {
		fields = append(fields, coinbase.FieldUnit)
	}
	if m.env != nil {
		fields = append(fields, coinbase.FieldEnv)
	}
	if m.reserved_amount != nil {
		fields = append(fields, coinbase.FieldReservedAmount)
	}
	if m.for_pay != nil {
		fields = append(fields, coinbase.FieldForPay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinBaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.CreatedAt()
	case coinbase.FieldUpdatedAt:
		return m.UpdatedAt()
	case coinbase.FieldDeletedAt:
		return m.DeletedAt()
	case coinbase.FieldName:
		return m.Name()
	case coinbase.FieldLogo:
		return m.Logo()
	case coinbase.FieldPresale:
		return m.Presale()
	case coinbase.FieldUnit:
		return m.Unit()
	case coinbase.FieldEnv:
		return m.Env()
	case coinbase.FieldReservedAmount:
		return m.ReservedAmount()
	case coinbase.FieldForPay:
		return m.ForPay()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinBaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinbase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coinbase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coinbase.FieldName:
		return m.OldName(ctx)
	case coinbase.FieldLogo:
		return m.OldLogo(ctx)
	case coinbase.FieldPresale:
		return m.OldPresale(ctx)
	case coinbase.FieldUnit:
		return m.OldUnit(ctx)
	case coinbase.FieldEnv:
		return m.OldEnv(ctx)
	case coinbase.FieldReservedAmount:
		return m.OldReservedAmount(ctx)
	case coinbase.FieldForPay:
		return m.OldForPay(ctx)
	}
	return nil, fmt.Errorf("unknown CoinBase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinBaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinbase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinbase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coinbase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coinbase.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coinbase.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case coinbase.FieldPresale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPresale(v)
		return nil
	case coinbase.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case coinbase.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case coinbase.FieldReservedAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReservedAmount(v)
		return nil
	case coinbase.FieldForPay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForPay(v)
		return nil
	}
	return fmt.Errorf("unknown CoinBase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinBaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coinbase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coinbase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coinbase.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinBaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coinbase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coinbase.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinBaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinbase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coinbase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coinbase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinBase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinBaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coinbase.FieldName) {
		fields = append(fields, coinbase.FieldName)
	}
	if m.FieldCleared(coinbase.FieldLogo) {
		fields = append(fields, coinbase.FieldLogo)
	}
	if m.FieldCleared(coinbase.FieldPresale) {
		fields = append(fields, coinbase.FieldPresale)
	}
	if m.FieldCleared(coinbase.FieldUnit) {
		fields = append(fields, coinbase.FieldUnit)
	}
	if m.FieldCleared(coinbase.FieldEnv) {
		fields = append(fields, coinbase.FieldEnv)
	}
	if m.FieldCleared(coinbase.FieldReservedAmount) {
		fields = append(fields, coinbase.FieldReservedAmount)
	}
	if m.FieldCleared(coinbase.FieldForPay) {
		fields = append(fields, coinbase.FieldForPay)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinBaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinBaseMutation) ClearField(name string) error {
	switch name {
	case coinbase.FieldName:
		m.ClearName()
		return nil
	case coinbase.FieldLogo:
		m.ClearLogo()
		return nil
	case coinbase.FieldPresale:
		m.ClearPresale()
		return nil
	case coinbase.FieldUnit:
		m.ClearUnit()
		return nil
	case coinbase.FieldEnv:
		m.ClearEnv()
		return nil
	case coinbase.FieldReservedAmount:
		m.ClearReservedAmount()
		return nil
	case coinbase.FieldForPay:
		m.ClearForPay()
		return nil
	}
	return fmt.Errorf("unknown CoinBase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinBaseMutation) ResetField(name string) error {
	switch name {
	case coinbase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinbase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coinbase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coinbase.FieldName:
		m.ResetName()
		return nil
	case coinbase.FieldLogo:
		m.ResetLogo()
		return nil
	case coinbase.FieldPresale:
		m.ResetPresale()
		return nil
	case coinbase.FieldUnit:
		m.ResetUnit()
		return nil
	case coinbase.FieldEnv:
		m.ResetEnv()
		return nil
	case coinbase.FieldReservedAmount:
		m.ResetReservedAmount()
		return nil
	case coinbase.FieldForPay:
		m.ResetForPay()
		return nil
	}
	return fmt.Errorf("unknown CoinBase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinBaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinBaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinBaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinBaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinBaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinBaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinBaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinBase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinBaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinBase edge %s", name)
}

// CoinExtraMutation represents an operation that mutates the CoinExtra nodes in the graph.
type CoinExtraMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	coin_type_id  *uuid.UUID
	home_page     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoinExtra, error)
	predicates    []predicate.CoinExtra
}

var _ ent.Mutation = (*CoinExtraMutation)(nil)

// coinextraOption allows management of the mutation configuration using functional options.
type coinextraOption func(*CoinExtraMutation)

// newCoinExtraMutation creates new mutation for the CoinExtra entity.
func newCoinExtraMutation(c config, op Op, opts ...coinextraOption) *CoinExtraMutation {
	m := &CoinExtraMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinExtra,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinExtraID sets the ID field of the mutation.
func withCoinExtraID(id uuid.UUID) coinextraOption {
	return func(m *CoinExtraMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinExtra
		)
		m.oldValue = func(ctx context.Context) (*CoinExtra, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinExtra.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinExtra sets the old CoinExtra of the mutation.
func withCoinExtra(node *CoinExtra) coinextraOption {
	return func(m *CoinExtraMutation) {
		m.oldValue = func(context.Context) (*CoinExtra, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinExtraMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinExtraMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinExtra entities.
func (m *CoinExtraMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinExtraMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinExtraMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinExtra.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinExtraMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinExtraMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinExtraMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinExtraMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinExtraMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinExtraMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinExtraMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinExtraMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinExtraMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinExtraMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinExtraMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinExtraMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinExtraMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinExtraMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinExtraMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinExtraMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinExtraMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *CoinExtraMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[coinextra.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *CoinExtraMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinExtraMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, coinextra.FieldCoinTypeID)
}

// SetHomePage sets the "home_page" field.
func (m *CoinExtraMutation) SetHomePage(s string) {
	m.home_page = &s
}

// HomePage returns the value of the "home_page" field in the mutation.
func (m *CoinExtraMutation) HomePage() (r string, exists bool) {
	v := m.home_page
	if v == nil {
		return
	}
	return *v, true
}

// OldHomePage returns the old "home_page" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldHomePage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHomePage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHomePage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHomePage: %w", err)
	}
	return oldValue.HomePage, nil
}

// ClearHomePage clears the value of the "home_page" field.
func (m *CoinExtraMutation) ClearHomePage() {
	m.home_page = nil
	m.clearedFields[coinextra.FieldHomePage] = struct{}{}
}

// HomePageCleared returns if the "home_page" field was cleared in this mutation.
func (m *CoinExtraMutation) HomePageCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldHomePage]
	return ok
}

// ResetHomePage resets all changes to the "home_page" field.
func (m *CoinExtraMutation) ResetHomePage() {
	m.home_page = nil
	delete(m.clearedFields, coinextra.FieldHomePage)
}

// Where appends a list predicates to the CoinExtraMutation builder.
func (m *CoinExtraMutation) Where(ps ...predicate.CoinExtra) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinExtraMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinExtra).
func (m *CoinExtraMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinExtraMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, coinextra.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coinextra.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coinextra.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, coinextra.FieldCoinTypeID)
	}
	if m.home_page != nil {
		fields = append(fields, coinextra.FieldHomePage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinExtraMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.CreatedAt()
	case coinextra.FieldUpdatedAt:
		return m.UpdatedAt()
	case coinextra.FieldDeletedAt:
		return m.DeletedAt()
	case coinextra.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinextra.FieldHomePage:
		return m.HomePage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinExtraMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinextra.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coinextra.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coinextra.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinextra.FieldHomePage:
		return m.OldHomePage(ctx)
	}
	return nil, fmt.Errorf("unknown CoinExtra field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinExtraMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinextra.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinextra.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coinextra.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coinextra.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinextra.FieldHomePage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHomePage(v)
		return nil
	}
	return fmt.Errorf("unknown CoinExtra field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinExtraMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coinextra.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coinextra.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coinextra.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinExtraMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coinextra.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coinextra.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinExtraMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinextra.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coinextra.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coinextra.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinExtra numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinExtraMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coinextra.FieldCoinTypeID) {
		fields = append(fields, coinextra.FieldCoinTypeID)
	}
	if m.FieldCleared(coinextra.FieldHomePage) {
		fields = append(fields, coinextra.FieldHomePage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinExtraMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinExtraMutation) ClearField(name string) error {
	switch name {
	case coinextra.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case coinextra.FieldHomePage:
		m.ClearHomePage()
		return nil
	}
	return fmt.Errorf("unknown CoinExtra nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinExtraMutation) ResetField(name string) error {
	switch name {
	case coinextra.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinextra.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coinextra.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coinextra.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinextra.FieldHomePage:
		m.ResetHomePage()
		return nil
	}
	return fmt.Errorf("unknown CoinExtra field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinExtraMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinExtraMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinExtraMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinExtraMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinExtraMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinExtraMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinExtraMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinExtra unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinExtraMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinExtra edge %s", name)
}

// ExchangeRateMutation represents an operation that mutates the ExchangeRate nodes in the graph.
type ExchangeRateMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	app_id            *uuid.UUID
	coin_type_id      *uuid.UUID
	market_value      *decimal.Decimal
	settle_value      *decimal.Decimal
	settle_percent    *uint32
	addsettle_percent *int32
	setter            *uuid.UUID
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*ExchangeRate, error)
	predicates        []predicate.ExchangeRate
}

var _ ent.Mutation = (*ExchangeRateMutation)(nil)

// exchangerateOption allows management of the mutation configuration using functional options.
type exchangerateOption func(*ExchangeRateMutation)

// newExchangeRateMutation creates new mutation for the ExchangeRate entity.
func newExchangeRateMutation(c config, op Op, opts ...exchangerateOption) *ExchangeRateMutation {
	m := &ExchangeRateMutation{
		config:        c,
		op:            op,
		typ:           TypeExchangeRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExchangeRateID sets the ID field of the mutation.
func withExchangeRateID(id uuid.UUID) exchangerateOption {
	return func(m *ExchangeRateMutation) {
		var (
			err   error
			once  sync.Once
			value *ExchangeRate
		)
		m.oldValue = func(ctx context.Context) (*ExchangeRate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExchangeRate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExchangeRate sets the old ExchangeRate of the mutation.
func withExchangeRate(node *ExchangeRate) exchangerateOption {
	return func(m *ExchangeRateMutation) {
		m.oldValue = func(context.Context) (*ExchangeRate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExchangeRateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExchangeRateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExchangeRate entities.
func (m *ExchangeRateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExchangeRateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExchangeRateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExchangeRate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExchangeRateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExchangeRateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ExchangeRateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ExchangeRateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExchangeRateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExchangeRateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExchangeRateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ExchangeRateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ExchangeRateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExchangeRateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExchangeRateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExchangeRateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ExchangeRateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ExchangeRateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExchangeRateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ExchangeRateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ExchangeRateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *ExchangeRateMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[exchangerate.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *ExchangeRateMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ExchangeRateMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, exchangerate.FieldAppID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ExchangeRateMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ExchangeRateMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ExchangeRateMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[exchangerate.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ExchangeRateMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ExchangeRateMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, exchangerate.FieldCoinTypeID)
}

// SetMarketValue sets the "market_value" field.
func (m *ExchangeRateMutation) SetMarketValue(d decimal.Decimal) {
	m.market_value = &d
}

// MarketValue returns the value of the "market_value" field in the mutation.
func (m *ExchangeRateMutation) MarketValue() (r decimal.Decimal, exists bool) {
	v := m.market_value
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValue returns the old "market_value" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldMarketValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValue: %w", err)
	}
	return oldValue.MarketValue, nil
}

// ClearMarketValue clears the value of the "market_value" field.
func (m *ExchangeRateMutation) ClearMarketValue() {
	m.market_value = nil
	m.clearedFields[exchangerate.FieldMarketValue] = struct{}{}
}

// MarketValueCleared returns if the "market_value" field was cleared in this mutation.
func (m *ExchangeRateMutation) MarketValueCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldMarketValue]
	return ok
}

// ResetMarketValue resets all changes to the "market_value" field.
func (m *ExchangeRateMutation) ResetMarketValue() {
	m.market_value = nil
	delete(m.clearedFields, exchangerate.FieldMarketValue)
}

// SetSettleValue sets the "settle_value" field.
func (m *ExchangeRateMutation) SetSettleValue(d decimal.Decimal) {
	m.settle_value = &d
}

// SettleValue returns the value of the "settle_value" field in the mutation.
func (m *ExchangeRateMutation) SettleValue() (r decimal.Decimal, exists bool) {
	v := m.settle_value
	if v == nil {
		return
	}
	return *v, true
}

// OldSettleValue returns the old "settle_value" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSettleValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettleValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettleValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettleValue: %w", err)
	}
	return oldValue.SettleValue, nil
}

// ClearSettleValue clears the value of the "settle_value" field.
func (m *ExchangeRateMutation) ClearSettleValue() {
	m.settle_value = nil
	m.clearedFields[exchangerate.FieldSettleValue] = struct{}{}
}

// SettleValueCleared returns if the "settle_value" field was cleared in this mutation.
func (m *ExchangeRateMutation) SettleValueCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSettleValue]
	return ok
}

// ResetSettleValue resets all changes to the "settle_value" field.
func (m *ExchangeRateMutation) ResetSettleValue() {
	m.settle_value = nil
	delete(m.clearedFields, exchangerate.FieldSettleValue)
}

// SetSettlePercent sets the "settle_percent" field.
func (m *ExchangeRateMutation) SetSettlePercent(u uint32) {
	m.settle_percent = &u
	m.addsettle_percent = nil
}

// SettlePercent returns the value of the "settle_percent" field in the mutation.
func (m *ExchangeRateMutation) SettlePercent() (r uint32, exists bool) {
	v := m.settle_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldSettlePercent returns the old "settle_percent" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSettlePercent(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettlePercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettlePercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettlePercent: %w", err)
	}
	return oldValue.SettlePercent, nil
}

// AddSettlePercent adds u to the "settle_percent" field.
func (m *ExchangeRateMutation) AddSettlePercent(u int32) {
	if m.addsettle_percent != nil {
		*m.addsettle_percent += u
	} else {
		m.addsettle_percent = &u
	}
}

// AddedSettlePercent returns the value that was added to the "settle_percent" field in this mutation.
func (m *ExchangeRateMutation) AddedSettlePercent() (r int32, exists bool) {
	v := m.addsettle_percent
	if v == nil {
		return
	}
	return *v, true
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (m *ExchangeRateMutation) ClearSettlePercent() {
	m.settle_percent = nil
	m.addsettle_percent = nil
	m.clearedFields[exchangerate.FieldSettlePercent] = struct{}{}
}

// SettlePercentCleared returns if the "settle_percent" field was cleared in this mutation.
func (m *ExchangeRateMutation) SettlePercentCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSettlePercent]
	return ok
}

// ResetSettlePercent resets all changes to the "settle_percent" field.
func (m *ExchangeRateMutation) ResetSettlePercent() {
	m.settle_percent = nil
	m.addsettle_percent = nil
	delete(m.clearedFields, exchangerate.FieldSettlePercent)
}

// SetSetter sets the "setter" field.
func (m *ExchangeRateMutation) SetSetter(u uuid.UUID) {
	m.setter = &u
}

// Setter returns the value of the "setter" field in the mutation.
func (m *ExchangeRateMutation) Setter() (r uuid.UUID, exists bool) {
	v := m.setter
	if v == nil {
		return
	}
	return *v, true
}

// OldSetter returns the old "setter" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSetter(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSetter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSetter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSetter: %w", err)
	}
	return oldValue.Setter, nil
}

// ClearSetter clears the value of the "setter" field.
func (m *ExchangeRateMutation) ClearSetter() {
	m.setter = nil
	m.clearedFields[exchangerate.FieldSetter] = struct{}{}
}

// SetterCleared returns if the "setter" field was cleared in this mutation.
func (m *ExchangeRateMutation) SetterCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSetter]
	return ok
}

// ResetSetter resets all changes to the "setter" field.
func (m *ExchangeRateMutation) ResetSetter() {
	m.setter = nil
	delete(m.clearedFields, exchangerate.FieldSetter)
}

// Where appends a list predicates to the ExchangeRateMutation builder.
func (m *ExchangeRateMutation) Where(ps ...predicate.ExchangeRate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExchangeRateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ExchangeRate).
func (m *ExchangeRateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExchangeRateMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, exchangerate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exchangerate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exchangerate.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, exchangerate.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, exchangerate.FieldCoinTypeID)
	}
	if m.market_value != nil {
		fields = append(fields, exchangerate.FieldMarketValue)
	}
	if m.settle_value != nil {
		fields = append(fields, exchangerate.FieldSettleValue)
	}
	if m.settle_percent != nil {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	if m.setter != nil {
		fields = append(fields, exchangerate.FieldSetter)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExchangeRateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.CreatedAt()
	case exchangerate.FieldUpdatedAt:
		return m.UpdatedAt()
	case exchangerate.FieldDeletedAt:
		return m.DeletedAt()
	case exchangerate.FieldAppID:
		return m.AppID()
	case exchangerate.FieldCoinTypeID:
		return m.CoinTypeID()
	case exchangerate.FieldMarketValue:
		return m.MarketValue()
	case exchangerate.FieldSettleValue:
		return m.SettleValue()
	case exchangerate.FieldSettlePercent:
		return m.SettlePercent()
	case exchangerate.FieldSetter:
		return m.Setter()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExchangeRateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exchangerate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exchangerate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exchangerate.FieldAppID:
		return m.OldAppID(ctx)
	case exchangerate.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case exchangerate.FieldMarketValue:
		return m.OldMarketValue(ctx)
	case exchangerate.FieldSettleValue:
		return m.OldSettleValue(ctx)
	case exchangerate.FieldSettlePercent:
		return m.OldSettlePercent(ctx)
	case exchangerate.FieldSetter:
		return m.OldSetter(ctx)
	}
	return nil, fmt.Errorf("unknown ExchangeRate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeRateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exchangerate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exchangerate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exchangerate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case exchangerate.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case exchangerate.FieldMarketValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValue(v)
		return nil
	case exchangerate.FieldSettleValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettleValue(v)
		return nil
	case exchangerate.FieldSettlePercent:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettlePercent(v)
		return nil
	case exchangerate.FieldSetter:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSetter(v)
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExchangeRateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, exchangerate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, exchangerate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, exchangerate.FieldDeletedAt)
	}
	if m.addsettle_percent != nil {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExchangeRateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case exchangerate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case exchangerate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case exchangerate.FieldSettlePercent:
		return m.AddedSettlePercent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeRateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case exchangerate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case exchangerate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case exchangerate.FieldSettlePercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSettlePercent(v)
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExchangeRateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exchangerate.FieldAppID) {
		fields = append(fields, exchangerate.FieldAppID)
	}
	if m.FieldCleared(exchangerate.FieldCoinTypeID) {
		fields = append(fields, exchangerate.FieldCoinTypeID)
	}
	if m.FieldCleared(exchangerate.FieldMarketValue) {
		fields = append(fields, exchangerate.FieldMarketValue)
	}
	if m.FieldCleared(exchangerate.FieldSettleValue) {
		fields = append(fields, exchangerate.FieldSettleValue)
	}
	if m.FieldCleared(exchangerate.FieldSettlePercent) {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	if m.FieldCleared(exchangerate.FieldSetter) {
		fields = append(fields, exchangerate.FieldSetter)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExchangeRateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExchangeRateMutation) ClearField(name string) error {
	switch name {
	case exchangerate.FieldAppID:
		m.ClearAppID()
		return nil
	case exchangerate.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case exchangerate.FieldMarketValue:
		m.ClearMarketValue()
		return nil
	case exchangerate.FieldSettleValue:
		m.ClearSettleValue()
		return nil
	case exchangerate.FieldSettlePercent:
		m.ClearSettlePercent()
		return nil
	case exchangerate.FieldSetter:
		m.ClearSetter()
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExchangeRateMutation) ResetField(name string) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exchangerate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exchangerate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exchangerate.FieldAppID:
		m.ResetAppID()
		return nil
	case exchangerate.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case exchangerate.FieldMarketValue:
		m.ResetMarketValue()
		return nil
	case exchangerate.FieldSettleValue:
		m.ResetSettleValue()
		return nil
	case exchangerate.FieldSettlePercent:
		m.ResetSettlePercent()
		return nil
	case exchangerate.FieldSetter:
		m.ResetSetter()
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExchangeRateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExchangeRateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExchangeRateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExchangeRateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExchangeRateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExchangeRateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExchangeRateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExchangeRate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExchangeRateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExchangeRate edge %s", name)
}

// TranMutation represents an operation that mutates the Tran nodes in the graph.
type TranMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	from_account_id *uuid.UUID
	to_account_id   *uuid.UUID
	amount          *decimal.Decimal
	fee_amount      *decimal.Decimal
	chain_tx_id     *string
	state           *string
	extra           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Tran, error)
	predicates      []predicate.Tran
}

var _ ent.Mutation = (*TranMutation)(nil)

// tranOption allows management of the mutation configuration using functional options.
type tranOption func(*TranMutation)

// newTranMutation creates new mutation for the Tran entity.
func newTranMutation(c config, op Op, opts ...tranOption) *TranMutation {
	m := &TranMutation{
		config:        c,
		op:            op,
		typ:           TypeTran,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranID sets the ID field of the mutation.
func withTranID(id uuid.UUID) tranOption {
	return func(m *TranMutation) {
		var (
			err   error
			once  sync.Once
			value *Tran
		)
		m.oldValue = func(ctx context.Context) (*Tran, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tran.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTran sets the old Tran of the mutation.
func withTran(node *Tran) tranOption {
	return func(m *TranMutation) {
		m.oldValue = func(context.Context) (*Tran, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tran entities.
func (m *TranMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tran.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TranMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TranMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TranMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TranMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TranMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TranMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TranMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TranMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TranMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TranMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TranMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TranMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TranMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TranMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TranMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetFromAccountID sets the "from_account_id" field.
func (m *TranMutation) SetFromAccountID(u uuid.UUID) {
	m.from_account_id = &u
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *TranMutation) FromAccountID() (r uuid.UUID, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFromAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// ClearFromAccountID clears the value of the "from_account_id" field.
func (m *TranMutation) ClearFromAccountID() {
	m.from_account_id = nil
	m.clearedFields[tran.FieldFromAccountID] = struct{}{}
}

// FromAccountIDCleared returns if the "from_account_id" field was cleared in this mutation.
func (m *TranMutation) FromAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldFromAccountID]
	return ok
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *TranMutation) ResetFromAccountID() {
	m.from_account_id = nil
	delete(m.clearedFields, tran.FieldFromAccountID)
}

// SetToAccountID sets the "to_account_id" field.
func (m *TranMutation) SetToAccountID(u uuid.UUID) {
	m.to_account_id = &u
}

// ToAccountID returns the value of the "to_account_id" field in the mutation.
func (m *TranMutation) ToAccountID() (r uuid.UUID, exists bool) {
	v := m.to_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToAccountID returns the old "to_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldToAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAccountID: %w", err)
	}
	return oldValue.ToAccountID, nil
}

// ClearToAccountID clears the value of the "to_account_id" field.
func (m *TranMutation) ClearToAccountID() {
	m.to_account_id = nil
	m.clearedFields[tran.FieldToAccountID] = struct{}{}
}

// ToAccountIDCleared returns if the "to_account_id" field was cleared in this mutation.
func (m *TranMutation) ToAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldToAccountID]
	return ok
}

// ResetToAccountID resets all changes to the "to_account_id" field.
func (m *TranMutation) ResetToAccountID() {
	m.to_account_id = nil
	delete(m.clearedFields, tran.FieldToAccountID)
}

// SetAmount sets the "amount" field.
func (m *TranMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TranMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *TranMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[tran.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *TranMutation) AmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *TranMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, tran.FieldAmount)
}

// SetFeeAmount sets the "fee_amount" field.
func (m *TranMutation) SetFeeAmount(d decimal.Decimal) {
	m.fee_amount = &d
}

// FeeAmount returns the value of the "fee_amount" field in the mutation.
func (m *TranMutation) FeeAmount() (r decimal.Decimal, exists bool) {
	v := m.fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeAmount returns the old "fee_amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeAmount: %w", err)
	}
	return oldValue.FeeAmount, nil
}

// ClearFeeAmount clears the value of the "fee_amount" field.
func (m *TranMutation) ClearFeeAmount() {
	m.fee_amount = nil
	m.clearedFields[tran.FieldFeeAmount] = struct{}{}
}

// FeeAmountCleared returns if the "fee_amount" field was cleared in this mutation.
func (m *TranMutation) FeeAmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldFeeAmount]
	return ok
}

// ResetFeeAmount resets all changes to the "fee_amount" field.
func (m *TranMutation) ResetFeeAmount() {
	m.fee_amount = nil
	delete(m.clearedFields, tran.FieldFeeAmount)
}

// SetChainTxID sets the "chain_tx_id" field.
func (m *TranMutation) SetChainTxID(s string) {
	m.chain_tx_id = &s
}

// ChainTxID returns the value of the "chain_tx_id" field in the mutation.
func (m *TranMutation) ChainTxID() (r string, exists bool) {
	v := m.chain_tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTxID returns the old "chain_tx_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldChainTxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTxID: %w", err)
	}
	return oldValue.ChainTxID, nil
}

// ClearChainTxID clears the value of the "chain_tx_id" field.
func (m *TranMutation) ClearChainTxID() {
	m.chain_tx_id = nil
	m.clearedFields[tran.FieldChainTxID] = struct{}{}
}

// ChainTxIDCleared returns if the "chain_tx_id" field was cleared in this mutation.
func (m *TranMutation) ChainTxIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldChainTxID]
	return ok
}

// ResetChainTxID resets all changes to the "chain_tx_id" field.
func (m *TranMutation) ResetChainTxID() {
	m.chain_tx_id = nil
	delete(m.clearedFields, tran.FieldChainTxID)
}

// SetState sets the "state" field.
func (m *TranMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TranMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *TranMutation) ClearState() {
	m.state = nil
	m.clearedFields[tran.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *TranMutation) StateCleared() bool {
	_, ok := m.clearedFields[tran.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *TranMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, tran.FieldState)
}

// SetExtra sets the "extra" field.
func (m *TranMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *TranMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *TranMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[tran.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *TranMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[tran.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *TranMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, tran.FieldExtra)
}

// Where appends a list predicates to the TranMutation builder.
func (m *TranMutation) Where(ps ...predicate.Tran) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TranMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tran).
func (m *TranMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	if m.from_account_id != nil {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.to_account_id != nil {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.amount != nil {
		fields = append(fields, tran.FieldAmount)
	}
	if m.fee_amount != nil {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.chain_tx_id != nil {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.state != nil {
		fields = append(fields, tran.FieldState)
	}
	if m.extra != nil {
		fields = append(fields, tran.FieldExtra)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.CreatedAt()
	case tran.FieldUpdatedAt:
		return m.UpdatedAt()
	case tran.FieldDeletedAt:
		return m.DeletedAt()
	case tran.FieldFromAccountID:
		return m.FromAccountID()
	case tran.FieldToAccountID:
		return m.ToAccountID()
	case tran.FieldAmount:
		return m.Amount()
	case tran.FieldFeeAmount:
		return m.FeeAmount()
	case tran.FieldChainTxID:
		return m.ChainTxID()
	case tran.FieldState:
		return m.State()
	case tran.FieldExtra:
		return m.Extra()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tran.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tran.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tran.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case tran.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case tran.FieldToAccountID:
		return m.OldToAccountID(ctx)
	case tran.FieldAmount:
		return m.OldAmount(ctx)
	case tran.FieldFeeAmount:
		return m.OldFeeAmount(ctx)
	case tran.FieldChainTxID:
		return m.OldChainTxID(ctx)
	case tran.FieldState:
		return m.OldState(ctx)
	case tran.FieldExtra:
		return m.OldExtra(ctx)
	}
	return nil, fmt.Errorf("unknown Tran field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case tran.FieldFromAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case tran.FieldToAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAccountID(v)
		return nil
	case tran.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case tran.FieldFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeAmount(v)
		return nil
	case tran.FieldChainTxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTxID(v)
		return nil
	case tran.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case tran.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tran.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case tran.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tran numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tran.FieldFromAccountID) {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.FieldCleared(tran.FieldToAccountID) {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.FieldCleared(tran.FieldAmount) {
		fields = append(fields, tran.FieldAmount)
	}
	if m.FieldCleared(tran.FieldFeeAmount) {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.FieldCleared(tran.FieldChainTxID) {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.FieldCleared(tran.FieldState) {
		fields = append(fields, tran.FieldState)
	}
	if m.FieldCleared(tran.FieldExtra) {
		fields = append(fields, tran.FieldExtra)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranMutation) ClearField(name string) error {
	switch name {
	case tran.FieldFromAccountID:
		m.ClearFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ClearToAccountID()
		return nil
	case tran.FieldAmount:
		m.ClearAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ClearFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ClearChainTxID()
		return nil
	case tran.FieldState:
		m.ClearState()
		return nil
	case tran.FieldExtra:
		m.ClearExtra()
		return nil
	}
	return fmt.Errorf("unknown Tran nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranMutation) ResetField(name string) error {
	switch name {
	case tran.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tran.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tran.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case tran.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ResetToAccountID()
		return nil
	case tran.FieldAmount:
		m.ResetAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ResetFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ResetChainTxID()
		return nil
	case tran.FieldState:
		m.ResetState()
		return nil
	case tran.FieldExtra:
		m.ResetExtra()
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tran unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tran edge %s", name)
}
