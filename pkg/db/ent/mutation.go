// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/tran"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTran = "Tran"
)

// TranMutation represents an operation that mutates the Tran nodes in the graph.
type TranMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	from_account_id *uuid.UUID
	to_account_id   *uuid.UUID
	amount          *decimal.Decimal
	fee_amount      *decimal.Decimal
	chain_tx_id     *string
	state           *string
	extra           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Tran, error)
	predicates      []predicate.Tran
}

var _ ent.Mutation = (*TranMutation)(nil)

// tranOption allows management of the mutation configuration using functional options.
type tranOption func(*TranMutation)

// newTranMutation creates new mutation for the Tran entity.
func newTranMutation(c config, op Op, opts ...tranOption) *TranMutation {
	m := &TranMutation{
		config:        c,
		op:            op,
		typ:           TypeTran,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranID sets the ID field of the mutation.
func withTranID(id uuid.UUID) tranOption {
	return func(m *TranMutation) {
		var (
			err   error
			once  sync.Once
			value *Tran
		)
		m.oldValue = func(ctx context.Context) (*Tran, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tran.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTran sets the old Tran of the mutation.
func withTran(node *Tran) tranOption {
	return func(m *TranMutation) {
		m.oldValue = func(context.Context) (*Tran, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tran entities.
func (m *TranMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tran.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TranMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TranMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TranMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TranMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TranMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TranMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TranMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TranMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TranMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TranMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TranMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TranMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TranMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TranMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TranMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetFromAccountID sets the "from_account_id" field.
func (m *TranMutation) SetFromAccountID(u uuid.UUID) {
	m.from_account_id = &u
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *TranMutation) FromAccountID() (r uuid.UUID, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFromAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// ClearFromAccountID clears the value of the "from_account_id" field.
func (m *TranMutation) ClearFromAccountID() {
	m.from_account_id = nil
	m.clearedFields[tran.FieldFromAccountID] = struct{}{}
}

// FromAccountIDCleared returns if the "from_account_id" field was cleared in this mutation.
func (m *TranMutation) FromAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldFromAccountID]
	return ok
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *TranMutation) ResetFromAccountID() {
	m.from_account_id = nil
	delete(m.clearedFields, tran.FieldFromAccountID)
}

// SetToAccountID sets the "to_account_id" field.
func (m *TranMutation) SetToAccountID(u uuid.UUID) {
	m.to_account_id = &u
}

// ToAccountID returns the value of the "to_account_id" field in the mutation.
func (m *TranMutation) ToAccountID() (r uuid.UUID, exists bool) {
	v := m.to_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToAccountID returns the old "to_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldToAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAccountID: %w", err)
	}
	return oldValue.ToAccountID, nil
}

// ClearToAccountID clears the value of the "to_account_id" field.
func (m *TranMutation) ClearToAccountID() {
	m.to_account_id = nil
	m.clearedFields[tran.FieldToAccountID] = struct{}{}
}

// ToAccountIDCleared returns if the "to_account_id" field was cleared in this mutation.
func (m *TranMutation) ToAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldToAccountID]
	return ok
}

// ResetToAccountID resets all changes to the "to_account_id" field.
func (m *TranMutation) ResetToAccountID() {
	m.to_account_id = nil
	delete(m.clearedFields, tran.FieldToAccountID)
}

// SetAmount sets the "amount" field.
func (m *TranMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TranMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *TranMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[tran.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *TranMutation) AmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *TranMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, tran.FieldAmount)
}

// SetFeeAmount sets the "fee_amount" field.
func (m *TranMutation) SetFeeAmount(d decimal.Decimal) {
	m.fee_amount = &d
}

// FeeAmount returns the value of the "fee_amount" field in the mutation.
func (m *TranMutation) FeeAmount() (r decimal.Decimal, exists bool) {
	v := m.fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeAmount returns the old "fee_amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeAmount: %w", err)
	}
	return oldValue.FeeAmount, nil
}

// ClearFeeAmount clears the value of the "fee_amount" field.
func (m *TranMutation) ClearFeeAmount() {
	m.fee_amount = nil
	m.clearedFields[tran.FieldFeeAmount] = struct{}{}
}

// FeeAmountCleared returns if the "fee_amount" field was cleared in this mutation.
func (m *TranMutation) FeeAmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldFeeAmount]
	return ok
}

// ResetFeeAmount resets all changes to the "fee_amount" field.
func (m *TranMutation) ResetFeeAmount() {
	m.fee_amount = nil
	delete(m.clearedFields, tran.FieldFeeAmount)
}

// SetChainTxID sets the "chain_tx_id" field.
func (m *TranMutation) SetChainTxID(s string) {
	m.chain_tx_id = &s
}

// ChainTxID returns the value of the "chain_tx_id" field in the mutation.
func (m *TranMutation) ChainTxID() (r string, exists bool) {
	v := m.chain_tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTxID returns the old "chain_tx_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldChainTxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTxID: %w", err)
	}
	return oldValue.ChainTxID, nil
}

// ClearChainTxID clears the value of the "chain_tx_id" field.
func (m *TranMutation) ClearChainTxID() {
	m.chain_tx_id = nil
	m.clearedFields[tran.FieldChainTxID] = struct{}{}
}

// ChainTxIDCleared returns if the "chain_tx_id" field was cleared in this mutation.
func (m *TranMutation) ChainTxIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldChainTxID]
	return ok
}

// ResetChainTxID resets all changes to the "chain_tx_id" field.
func (m *TranMutation) ResetChainTxID() {
	m.chain_tx_id = nil
	delete(m.clearedFields, tran.FieldChainTxID)
}

// SetState sets the "state" field.
func (m *TranMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TranMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *TranMutation) ClearState() {
	m.state = nil
	m.clearedFields[tran.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *TranMutation) StateCleared() bool {
	_, ok := m.clearedFields[tran.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *TranMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, tran.FieldState)
}

// SetExtra sets the "extra" field.
func (m *TranMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *TranMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *TranMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[tran.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *TranMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[tran.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *TranMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, tran.FieldExtra)
}

// Where appends a list predicates to the TranMutation builder.
func (m *TranMutation) Where(ps ...predicate.Tran) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TranMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tran).
func (m *TranMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	if m.from_account_id != nil {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.to_account_id != nil {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.amount != nil {
		fields = append(fields, tran.FieldAmount)
	}
	if m.fee_amount != nil {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.chain_tx_id != nil {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.state != nil {
		fields = append(fields, tran.FieldState)
	}
	if m.extra != nil {
		fields = append(fields, tran.FieldExtra)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.CreatedAt()
	case tran.FieldUpdatedAt:
		return m.UpdatedAt()
	case tran.FieldDeletedAt:
		return m.DeletedAt()
	case tran.FieldFromAccountID:
		return m.FromAccountID()
	case tran.FieldToAccountID:
		return m.ToAccountID()
	case tran.FieldAmount:
		return m.Amount()
	case tran.FieldFeeAmount:
		return m.FeeAmount()
	case tran.FieldChainTxID:
		return m.ChainTxID()
	case tran.FieldState:
		return m.State()
	case tran.FieldExtra:
		return m.Extra()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tran.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tran.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tran.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case tran.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case tran.FieldToAccountID:
		return m.OldToAccountID(ctx)
	case tran.FieldAmount:
		return m.OldAmount(ctx)
	case tran.FieldFeeAmount:
		return m.OldFeeAmount(ctx)
	case tran.FieldChainTxID:
		return m.OldChainTxID(ctx)
	case tran.FieldState:
		return m.OldState(ctx)
	case tran.FieldExtra:
		return m.OldExtra(ctx)
	}
	return nil, fmt.Errorf("unknown Tran field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case tran.FieldFromAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case tran.FieldToAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAccountID(v)
		return nil
	case tran.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case tran.FieldFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeAmount(v)
		return nil
	case tran.FieldChainTxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTxID(v)
		return nil
	case tran.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case tran.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tran.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case tran.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tran numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tran.FieldFromAccountID) {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.FieldCleared(tran.FieldToAccountID) {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.FieldCleared(tran.FieldAmount) {
		fields = append(fields, tran.FieldAmount)
	}
	if m.FieldCleared(tran.FieldFeeAmount) {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.FieldCleared(tran.FieldChainTxID) {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.FieldCleared(tran.FieldState) {
		fields = append(fields, tran.FieldState)
	}
	if m.FieldCleared(tran.FieldExtra) {
		fields = append(fields, tran.FieldExtra)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranMutation) ClearField(name string) error {
	switch name {
	case tran.FieldFromAccountID:
		m.ClearFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ClearToAccountID()
		return nil
	case tran.FieldAmount:
		m.ClearAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ClearFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ClearChainTxID()
		return nil
	case tran.FieldState:
		m.ClearState()
		return nil
	case tran.FieldExtra:
		m.ClearExtra()
		return nil
	}
	return fmt.Errorf("unknown Tran nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranMutation) ResetField(name string) error {
	switch name {
	case tran.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tran.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tran.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case tran.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ResetToAccountID()
		return nil
	case tran.FieldAmount:
		m.ResetAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ResetFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ResetChainTxID()
		return nil
	case tran.FieldState:
		m.ResetState()
		return nil
	case tran.FieldExtra:
		m.ResetExtra()
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tran unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tran edge %s", name)
}
