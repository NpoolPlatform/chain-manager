// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/currencyvalue"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CurrencyValueUpdate is the builder for updating CurrencyValue entities.
type CurrencyValueUpdate struct {
	config
	hooks     []Hook
	mutation  *CurrencyValueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CurrencyValueUpdate builder.
func (cvu *CurrencyValueUpdate) Where(ps ...predicate.CurrencyValue) *CurrencyValueUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetCreatedAt sets the "created_at" field.
func (cvu *CurrencyValueUpdate) SetCreatedAt(u uint32) *CurrencyValueUpdate {
	cvu.mutation.ResetCreatedAt()
	cvu.mutation.SetCreatedAt(u)
	return cvu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableCreatedAt(u *uint32) *CurrencyValueUpdate {
	if u != nil {
		cvu.SetCreatedAt(*u)
	}
	return cvu
}

// AddCreatedAt adds u to the "created_at" field.
func (cvu *CurrencyValueUpdate) AddCreatedAt(u int32) *CurrencyValueUpdate {
	cvu.mutation.AddCreatedAt(u)
	return cvu
}

// SetUpdatedAt sets the "updated_at" field.
func (cvu *CurrencyValueUpdate) SetUpdatedAt(u uint32) *CurrencyValueUpdate {
	cvu.mutation.ResetUpdatedAt()
	cvu.mutation.SetUpdatedAt(u)
	return cvu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cvu *CurrencyValueUpdate) AddUpdatedAt(u int32) *CurrencyValueUpdate {
	cvu.mutation.AddUpdatedAt(u)
	return cvu
}

// SetDeletedAt sets the "deleted_at" field.
func (cvu *CurrencyValueUpdate) SetDeletedAt(u uint32) *CurrencyValueUpdate {
	cvu.mutation.ResetDeletedAt()
	cvu.mutation.SetDeletedAt(u)
	return cvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableDeletedAt(u *uint32) *CurrencyValueUpdate {
	if u != nil {
		cvu.SetDeletedAt(*u)
	}
	return cvu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cvu *CurrencyValueUpdate) AddDeletedAt(u int32) *CurrencyValueUpdate {
	cvu.mutation.AddDeletedAt(u)
	return cvu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cvu *CurrencyValueUpdate) SetCoinTypeID(u uuid.UUID) *CurrencyValueUpdate {
	cvu.mutation.SetCoinTypeID(u)
	return cvu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyValueUpdate {
	if u != nil {
		cvu.SetCoinTypeID(*u)
	}
	return cvu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cvu *CurrencyValueUpdate) ClearCoinTypeID() *CurrencyValueUpdate {
	cvu.mutation.ClearCoinTypeID()
	return cvu
}

// SetFeedSourceID sets the "feed_source_id" field.
func (cvu *CurrencyValueUpdate) SetFeedSourceID(u uuid.UUID) *CurrencyValueUpdate {
	cvu.mutation.SetFeedSourceID(u)
	return cvu
}

// SetNillableFeedSourceID sets the "feed_source_id" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableFeedSourceID(u *uuid.UUID) *CurrencyValueUpdate {
	if u != nil {
		cvu.SetFeedSourceID(*u)
	}
	return cvu
}

// ClearFeedSourceID clears the value of the "feed_source_id" field.
func (cvu *CurrencyValueUpdate) ClearFeedSourceID() *CurrencyValueUpdate {
	cvu.mutation.ClearFeedSourceID()
	return cvu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cvu *CurrencyValueUpdate) SetMarketValueHigh(d decimal.Decimal) *CurrencyValueUpdate {
	cvu.mutation.SetMarketValueHigh(d)
	return cvu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyValueUpdate {
	if d != nil {
		cvu.SetMarketValueHigh(*d)
	}
	return cvu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cvu *CurrencyValueUpdate) ClearMarketValueHigh() *CurrencyValueUpdate {
	cvu.mutation.ClearMarketValueHigh()
	return cvu
}

// SetMarketValueLow sets the "market_value_low" field.
func (cvu *CurrencyValueUpdate) SetMarketValueLow(d decimal.Decimal) *CurrencyValueUpdate {
	cvu.mutation.SetMarketValueLow(d)
	return cvu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cvu *CurrencyValueUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyValueUpdate {
	if d != nil {
		cvu.SetMarketValueLow(*d)
	}
	return cvu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cvu *CurrencyValueUpdate) ClearMarketValueLow() *CurrencyValueUpdate {
	cvu.mutation.ClearMarketValueLow()
	return cvu
}

// Mutation returns the CurrencyValueMutation object of the builder.
func (cvu *CurrencyValueUpdate) Mutation() *CurrencyValueMutation {
	return cvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *CurrencyValueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cvu.defaults(); err != nil {
		return 0, err
	}
	if len(cvu.hooks) == 0 {
		affected, err = cvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CurrencyValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cvu.mutation = mutation
			affected, err = cvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cvu.hooks) - 1; i >= 0; i-- {
			if cvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *CurrencyValueUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *CurrencyValueUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *CurrencyValueUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvu *CurrencyValueUpdate) defaults() error {
	if _, ok := cvu.mutation.UpdatedAt(); !ok {
		if currencyvalue.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized currencyvalue.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := currencyvalue.UpdateDefaultUpdatedAt()
		cvu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cvu *CurrencyValueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyValueUpdate {
	cvu.modifiers = append(cvu.modifiers, modifiers...)
	return cvu
}

func (cvu *CurrencyValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   currencyvalue.Table,
			Columns: currencyvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: currencyvalue.FieldID,
			},
		},
	}
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldCreatedAt,
		})
	}
	if value, ok := cvu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldCreatedAt,
		})
	}
	if value, ok := cvu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldUpdatedAt,
		})
	}
	if value, ok := cvu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldUpdatedAt,
		})
	}
	if value, ok := cvu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldDeletedAt,
		})
	}
	if value, ok := cvu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldDeletedAt,
		})
	}
	if value, ok := cvu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyvalue.FieldCoinTypeID,
		})
	}
	if cvu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyvalue.FieldCoinTypeID,
		})
	}
	if value, ok := cvu.mutation.FeedSourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyvalue.FieldFeedSourceID,
		})
	}
	if cvu.mutation.FeedSourceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyvalue.FieldFeedSourceID,
		})
	}
	if value, ok := cvu.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyvalue.FieldMarketValueHigh,
		})
	}
	if cvu.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyvalue.FieldMarketValueHigh,
		})
	}
	if value, ok := cvu.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyvalue.FieldMarketValueLow,
		})
	}
	if cvu.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyvalue.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = cvu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CurrencyValueUpdateOne is the builder for updating a single CurrencyValue entity.
type CurrencyValueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CurrencyValueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cvuo *CurrencyValueUpdateOne) SetCreatedAt(u uint32) *CurrencyValueUpdateOne {
	cvuo.mutation.ResetCreatedAt()
	cvuo.mutation.SetCreatedAt(u)
	return cvuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableCreatedAt(u *uint32) *CurrencyValueUpdateOne {
	if u != nil {
		cvuo.SetCreatedAt(*u)
	}
	return cvuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cvuo *CurrencyValueUpdateOne) AddCreatedAt(u int32) *CurrencyValueUpdateOne {
	cvuo.mutation.AddCreatedAt(u)
	return cvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cvuo *CurrencyValueUpdateOne) SetUpdatedAt(u uint32) *CurrencyValueUpdateOne {
	cvuo.mutation.ResetUpdatedAt()
	cvuo.mutation.SetUpdatedAt(u)
	return cvuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cvuo *CurrencyValueUpdateOne) AddUpdatedAt(u int32) *CurrencyValueUpdateOne {
	cvuo.mutation.AddUpdatedAt(u)
	return cvuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cvuo *CurrencyValueUpdateOne) SetDeletedAt(u uint32) *CurrencyValueUpdateOne {
	cvuo.mutation.ResetDeletedAt()
	cvuo.mutation.SetDeletedAt(u)
	return cvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableDeletedAt(u *uint32) *CurrencyValueUpdateOne {
	if u != nil {
		cvuo.SetDeletedAt(*u)
	}
	return cvuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cvuo *CurrencyValueUpdateOne) AddDeletedAt(u int32) *CurrencyValueUpdateOne {
	cvuo.mutation.AddDeletedAt(u)
	return cvuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cvuo *CurrencyValueUpdateOne) SetCoinTypeID(u uuid.UUID) *CurrencyValueUpdateOne {
	cvuo.mutation.SetCoinTypeID(u)
	return cvuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyValueUpdateOne {
	if u != nil {
		cvuo.SetCoinTypeID(*u)
	}
	return cvuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cvuo *CurrencyValueUpdateOne) ClearCoinTypeID() *CurrencyValueUpdateOne {
	cvuo.mutation.ClearCoinTypeID()
	return cvuo
}

// SetFeedSourceID sets the "feed_source_id" field.
func (cvuo *CurrencyValueUpdateOne) SetFeedSourceID(u uuid.UUID) *CurrencyValueUpdateOne {
	cvuo.mutation.SetFeedSourceID(u)
	return cvuo
}

// SetNillableFeedSourceID sets the "feed_source_id" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableFeedSourceID(u *uuid.UUID) *CurrencyValueUpdateOne {
	if u != nil {
		cvuo.SetFeedSourceID(*u)
	}
	return cvuo
}

// ClearFeedSourceID clears the value of the "feed_source_id" field.
func (cvuo *CurrencyValueUpdateOne) ClearFeedSourceID() *CurrencyValueUpdateOne {
	cvuo.mutation.ClearFeedSourceID()
	return cvuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cvuo *CurrencyValueUpdateOne) SetMarketValueHigh(d decimal.Decimal) *CurrencyValueUpdateOne {
	cvuo.mutation.SetMarketValueHigh(d)
	return cvuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyValueUpdateOne {
	if d != nil {
		cvuo.SetMarketValueHigh(*d)
	}
	return cvuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cvuo *CurrencyValueUpdateOne) ClearMarketValueHigh() *CurrencyValueUpdateOne {
	cvuo.mutation.ClearMarketValueHigh()
	return cvuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (cvuo *CurrencyValueUpdateOne) SetMarketValueLow(d decimal.Decimal) *CurrencyValueUpdateOne {
	cvuo.mutation.SetMarketValueLow(d)
	return cvuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cvuo *CurrencyValueUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyValueUpdateOne {
	if d != nil {
		cvuo.SetMarketValueLow(*d)
	}
	return cvuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cvuo *CurrencyValueUpdateOne) ClearMarketValueLow() *CurrencyValueUpdateOne {
	cvuo.mutation.ClearMarketValueLow()
	return cvuo
}

// Mutation returns the CurrencyValueMutation object of the builder.
func (cvuo *CurrencyValueUpdateOne) Mutation() *CurrencyValueMutation {
	return cvuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *CurrencyValueUpdateOne) Select(field string, fields ...string) *CurrencyValueUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated CurrencyValue entity.
func (cvuo *CurrencyValueUpdateOne) Save(ctx context.Context) (*CurrencyValue, error) {
	var (
		err  error
		node *CurrencyValue
	)
	if err := cvuo.defaults(); err != nil {
		return nil, err
	}
	if len(cvuo.hooks) == 0 {
		node, err = cvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CurrencyValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cvuo.mutation = mutation
			node, err = cvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cvuo.hooks) - 1; i >= 0; i-- {
			if cvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cvuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cvuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CurrencyValue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CurrencyValueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *CurrencyValueUpdateOne) SaveX(ctx context.Context) *CurrencyValue {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *CurrencyValueUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *CurrencyValueUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvuo *CurrencyValueUpdateOne) defaults() error {
	if _, ok := cvuo.mutation.UpdatedAt(); !ok {
		if currencyvalue.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized currencyvalue.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := currencyvalue.UpdateDefaultUpdatedAt()
		cvuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cvuo *CurrencyValueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyValueUpdateOne {
	cvuo.modifiers = append(cvuo.modifiers, modifiers...)
	return cvuo
}

func (cvuo *CurrencyValueUpdateOne) sqlSave(ctx context.Context) (_node *CurrencyValue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   currencyvalue.Table,
			Columns: currencyvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: currencyvalue.FieldID,
			},
		},
	}
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CurrencyValue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyvalue.FieldID)
		for _, f := range fields {
			if !currencyvalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currencyvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldCreatedAt,
		})
	}
	if value, ok := cvuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldCreatedAt,
		})
	}
	if value, ok := cvuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldUpdatedAt,
		})
	}
	if value, ok := cvuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldUpdatedAt,
		})
	}
	if value, ok := cvuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldDeletedAt,
		})
	}
	if value, ok := cvuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyvalue.FieldDeletedAt,
		})
	}
	if value, ok := cvuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyvalue.FieldCoinTypeID,
		})
	}
	if cvuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyvalue.FieldCoinTypeID,
		})
	}
	if value, ok := cvuo.mutation.FeedSourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyvalue.FieldFeedSourceID,
		})
	}
	if cvuo.mutation.FeedSourceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyvalue.FieldFeedSourceID,
		})
	}
	if value, ok := cvuo.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyvalue.FieldMarketValueHigh,
		})
	}
	if cvuo.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyvalue.FieldMarketValueHigh,
		})
	}
	if value, ok := cvuo.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyvalue.FieldMarketValueLow,
		})
	}
	if cvuo.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyvalue.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = cvuo.modifiers
	_node = &CurrencyValue{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
