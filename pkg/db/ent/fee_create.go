// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/fee"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FeeCreate is the builder for creating a Fee entity.
type FeeCreate struct {
	config
	mutation *FeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeeCreate) SetCreatedAt(u uint32) *FeeCreate {
	fc.mutation.SetCreatedAt(u)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableCreatedAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetCreatedAt(*u)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeeCreate) SetUpdatedAt(u uint32) *FeeCreate {
	fc.mutation.SetUpdatedAt(u)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableUpdatedAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetUpdatedAt(*u)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FeeCreate) SetDeletedAt(u uint32) *FeeCreate {
	fc.mutation.SetDeletedAt(u)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableDeletedAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetDeletedAt(*u)
	}
	return fc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (fc *FeeCreate) SetCoinTypeID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetCoinTypeID(u)
	return fc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableCoinTypeID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetCoinTypeID(*u)
	}
	return fc
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (fc *FeeCreate) SetFeeCoinTypeID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetFeeCoinTypeID(u)
	return fc
}

// SetNillableFeeCoinTypeID sets the "fee_coin_type_id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableFeeCoinTypeID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetFeeCoinTypeID(*u)
	}
	return fc
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (fc *FeeCreate) SetWithdrawFeeByStableUsd(b bool) *FeeCreate {
	fc.mutation.SetWithdrawFeeByStableUsd(b)
	return fc
}

// SetNillableWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field if the given value is not nil.
func (fc *FeeCreate) SetNillableWithdrawFeeByStableUsd(b *bool) *FeeCreate {
	if b != nil {
		fc.SetWithdrawFeeByStableUsd(*b)
	}
	return fc
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (fc *FeeCreate) SetWithdrawFeeAmount(d decimal.Decimal) *FeeCreate {
	fc.mutation.SetWithdrawFeeAmount(d)
	return fc
}

// SetNillableWithdrawFeeAmount sets the "withdraw_fee_amount" field if the given value is not nil.
func (fc *FeeCreate) SetNillableWithdrawFeeAmount(d *decimal.Decimal) *FeeCreate {
	if d != nil {
		fc.SetWithdrawFeeAmount(*d)
	}
	return fc
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (fc *FeeCreate) SetCollectFeeAmount(d decimal.Decimal) *FeeCreate {
	fc.mutation.SetCollectFeeAmount(d)
	return fc
}

// SetNillableCollectFeeAmount sets the "collect_fee_amount" field if the given value is not nil.
func (fc *FeeCreate) SetNillableCollectFeeAmount(d *decimal.Decimal) *FeeCreate {
	if d != nil {
		fc.SetCollectFeeAmount(*d)
	}
	return fc
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (fc *FeeCreate) SetHotWalletFeeAmount(d decimal.Decimal) *FeeCreate {
	fc.mutation.SetHotWalletFeeAmount(d)
	return fc
}

// SetNillableHotWalletFeeAmount sets the "hot_wallet_fee_amount" field if the given value is not nil.
func (fc *FeeCreate) SetNillableHotWalletFeeAmount(d *decimal.Decimal) *FeeCreate {
	if d != nil {
		fc.SetHotWalletFeeAmount(*d)
	}
	return fc
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (fc *FeeCreate) SetLowFeeAmount(d decimal.Decimal) *FeeCreate {
	fc.mutation.SetLowFeeAmount(d)
	return fc
}

// SetNillableLowFeeAmount sets the "low_fee_amount" field if the given value is not nil.
func (fc *FeeCreate) SetNillableLowFeeAmount(d *decimal.Decimal) *FeeCreate {
	if d != nil {
		fc.SetLowFeeAmount(*d)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeeCreate) SetID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// Mutation returns the FeeMutation object of the builder.
func (fc *FeeCreate) Mutation() *FeeMutation {
	return fc.mutation
}

// Save creates the Fee in the database.
func (fc *FeeCreate) Save(ctx context.Context) (*Fee, error) {
	var (
		err  error
		node *Fee
	)
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Fee)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeeCreate) SaveX(ctx context.Context) *Fee {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeeCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeeCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeeCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if fee.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fee.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if fee.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fee.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		if fee.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := fee.DefaultDeletedAt()
		fc.mutation.SetDeletedAt(v)
	}
	if _, ok := fc.mutation.CoinTypeID(); !ok {
		if fee.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := fee.DefaultCoinTypeID()
		fc.mutation.SetCoinTypeID(v)
	}
	if _, ok := fc.mutation.FeeCoinTypeID(); !ok {
		if fee.DefaultFeeCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultFeeCoinTypeID (forgotten import ent/runtime?)")
		}
		v := fee.DefaultFeeCoinTypeID()
		fc.mutation.SetFeeCoinTypeID(v)
	}
	if _, ok := fc.mutation.WithdrawFeeByStableUsd(); !ok {
		v := fee.DefaultWithdrawFeeByStableUsd
		fc.mutation.SetWithdrawFeeByStableUsd(v)
	}
	if _, ok := fc.mutation.WithdrawFeeAmount(); !ok {
		v := fee.DefaultWithdrawFeeAmount
		fc.mutation.SetWithdrawFeeAmount(v)
	}
	if _, ok := fc.mutation.CollectFeeAmount(); !ok {
		v := fee.DefaultCollectFeeAmount
		fc.mutation.SetCollectFeeAmount(v)
	}
	if _, ok := fc.mutation.HotWalletFeeAmount(); !ok {
		v := fee.DefaultHotWalletFeeAmount
		fc.mutation.SetHotWalletFeeAmount(v)
	}
	if _, ok := fc.mutation.LowFeeAmount(); !ok {
		v := fee.DefaultLowFeeAmount
		fc.mutation.SetLowFeeAmount(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		if fee.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized fee.DefaultID (forgotten import ent/runtime?)")
		}
		v := fee.DefaultID()
		fc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeeCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Fee.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Fee.updated_at"`)}
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Fee.deleted_at"`)}
	}
	return nil
}

func (fc *FeeCreate) sqlSave(ctx context.Context) (*Fee, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fc *FeeCreate) createSpec() (*Fee, *sqlgraph.CreateSpec) {
	var (
		_node = &Fee{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fee.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := fc.mutation.FeeCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldFeeCoinTypeID,
		})
		_node.FeeCoinTypeID = value
	}
	if value, ok := fc.mutation.WithdrawFeeByStableUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fee.FieldWithdrawFeeByStableUsd,
		})
		_node.WithdrawFeeByStableUsd = value
	}
	if value, ok := fc.mutation.WithdrawFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fee.FieldWithdrawFeeAmount,
		})
		_node.WithdrawFeeAmount = value
	}
	if value, ok := fc.mutation.CollectFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fee.FieldCollectFeeAmount,
		})
		_node.CollectFeeAmount = value
	}
	if value, ok := fc.mutation.HotWalletFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fee.FieldHotWalletFeeAmount,
		})
		_node.HotWalletFeeAmount = value
	}
	if value, ok := fc.mutation.LowFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fee.FieldLowFeeAmount,
		})
		_node.LowFeeAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fc *FeeCreate) OnConflict(opts ...sql.ConflictOption) *FeeUpsertOne {
	fc.conflict = opts
	return &FeeUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fc *FeeCreate) OnConflictColumns(columns ...string) *FeeUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertOne{
		create: fc,
	}
}

type (
	// FeeUpsertOne is the builder for "upsert"-ing
	//  one Fee node.
	FeeUpsertOne struct {
		create *FeeCreate
	}

	// FeeUpsert is the "OnConflict" setter.
	FeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FeeUpsert) SetCreatedAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateCreatedAt() *FeeUpsert {
	u.SetExcluded(fee.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeUpsert) AddCreatedAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeUpsert) SetUpdatedAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateUpdatedAt() *FeeUpsert {
	u.SetExcluded(fee.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeUpsert) AddUpdatedAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeUpsert) SetDeletedAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateDeletedAt() *FeeUpsert {
	u.SetExcluded(fee.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeUpsert) AddDeletedAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FeeUpsert) SetCoinTypeID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateCoinTypeID() *FeeUpsert {
	u.SetExcluded(fee.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FeeUpsert) ClearCoinTypeID() *FeeUpsert {
	u.SetNull(fee.FieldCoinTypeID)
	return u
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *FeeUpsert) SetFeeCoinTypeID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldFeeCoinTypeID, v)
	return u
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateFeeCoinTypeID() *FeeUpsert {
	u.SetExcluded(fee.FieldFeeCoinTypeID)
	return u
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *FeeUpsert) ClearFeeCoinTypeID() *FeeUpsert {
	u.SetNull(fee.FieldFeeCoinTypeID)
	return u
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsert) SetWithdrawFeeByStableUsd(v bool) *FeeUpsert {
	u.Set(fee.FieldWithdrawFeeByStableUsd, v)
	return u
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *FeeUpsert) UpdateWithdrawFeeByStableUsd() *FeeUpsert {
	u.SetExcluded(fee.FieldWithdrawFeeByStableUsd)
	return u
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsert) ClearWithdrawFeeByStableUsd() *FeeUpsert {
	u.SetNull(fee.FieldWithdrawFeeByStableUsd)
	return u
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *FeeUpsert) SetWithdrawFeeAmount(v decimal.Decimal) *FeeUpsert {
	u.Set(fee.FieldWithdrawFeeAmount, v)
	return u
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *FeeUpsert) UpdateWithdrawFeeAmount() *FeeUpsert {
	u.SetExcluded(fee.FieldWithdrawFeeAmount)
	return u
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *FeeUpsert) ClearWithdrawFeeAmount() *FeeUpsert {
	u.SetNull(fee.FieldWithdrawFeeAmount)
	return u
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *FeeUpsert) SetCollectFeeAmount(v decimal.Decimal) *FeeUpsert {
	u.Set(fee.FieldCollectFeeAmount, v)
	return u
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *FeeUpsert) UpdateCollectFeeAmount() *FeeUpsert {
	u.SetExcluded(fee.FieldCollectFeeAmount)
	return u
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *FeeUpsert) ClearCollectFeeAmount() *FeeUpsert {
	u.SetNull(fee.FieldCollectFeeAmount)
	return u
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *FeeUpsert) SetHotWalletFeeAmount(v decimal.Decimal) *FeeUpsert {
	u.Set(fee.FieldHotWalletFeeAmount, v)
	return u
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *FeeUpsert) UpdateHotWalletFeeAmount() *FeeUpsert {
	u.SetExcluded(fee.FieldHotWalletFeeAmount)
	return u
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *FeeUpsert) ClearHotWalletFeeAmount() *FeeUpsert {
	u.SetNull(fee.FieldHotWalletFeeAmount)
	return u
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *FeeUpsert) SetLowFeeAmount(v decimal.Decimal) *FeeUpsert {
	u.Set(fee.FieldLowFeeAmount, v)
	return u
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *FeeUpsert) UpdateLowFeeAmount() *FeeUpsert {
	u.SetExcluded(fee.FieldLowFeeAmount)
	return u
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *FeeUpsert) ClearLowFeeAmount() *FeeUpsert {
	u.SetNull(fee.FieldLowFeeAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeUpsertOne) UpdateNewValues() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fee.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Fee.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FeeUpsertOne) Ignore() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertOne) DoNothing() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreate.OnConflict
// documentation for more info.
func (u *FeeUpsertOne) Update(set func(*FeeUpsert)) *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeUpsertOne) SetCreatedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeUpsertOne) AddCreatedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateCreatedAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeUpsertOne) SetUpdatedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeUpsertOne) AddUpdatedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateUpdatedAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeUpsertOne) SetDeletedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeUpsertOne) AddDeletedAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateDeletedAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FeeUpsertOne) SetCoinTypeID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateCoinTypeID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FeeUpsertOne) ClearCoinTypeID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *FeeUpsertOne) SetFeeCoinTypeID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetFeeCoinTypeID(v)
	})
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateFeeCoinTypeID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateFeeCoinTypeID()
	})
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *FeeUpsertOne) ClearFeeCoinTypeID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearFeeCoinTypeID()
	})
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsertOne) SetWithdrawFeeByStableUsd(v bool) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetWithdrawFeeByStableUsd(v)
	})
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateWithdrawFeeByStableUsd() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateWithdrawFeeByStableUsd()
	})
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsertOne) ClearWithdrawFeeByStableUsd() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearWithdrawFeeByStableUsd()
	})
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *FeeUpsertOne) SetWithdrawFeeAmount(v decimal.Decimal) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetWithdrawFeeAmount(v)
	})
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateWithdrawFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateWithdrawFeeAmount()
	})
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *FeeUpsertOne) ClearWithdrawFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearWithdrawFeeAmount()
	})
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *FeeUpsertOne) SetCollectFeeAmount(v decimal.Decimal) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetCollectFeeAmount(v)
	})
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateCollectFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCollectFeeAmount()
	})
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *FeeUpsertOne) ClearCollectFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearCollectFeeAmount()
	})
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *FeeUpsertOne) SetHotWalletFeeAmount(v decimal.Decimal) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetHotWalletFeeAmount(v)
	})
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateHotWalletFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateHotWalletFeeAmount()
	})
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *FeeUpsertOne) ClearHotWalletFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearHotWalletFeeAmount()
	})
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *FeeUpsertOne) SetLowFeeAmount(v decimal.Decimal) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetLowFeeAmount(v)
	})
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateLowFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateLowFeeAmount()
	})
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *FeeUpsertOne) ClearLowFeeAmount() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearLowFeeAmount()
	})
}

// Exec executes the query.
func (u *FeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FeeUpsertOne.ID is not supported by MySQL driver. Use FeeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeeCreateBulk is the builder for creating many Fee entities in bulk.
type FeeCreateBulk struct {
	config
	builders []*FeeCreate
	conflict []sql.ConflictOption
}

// Save creates the Fee entities in the database.
func (fcb *FeeCreateBulk) Save(ctx context.Context) ([]*Fee, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fee, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeeCreateBulk) SaveX(ctx context.Context) []*Fee {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeeCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeeCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fcb *FeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeeUpsertBulk {
	fcb.conflict = opts
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fcb *FeeCreateBulk) OnConflictColumns(columns ...string) *FeeUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// FeeUpsertBulk is the builder for "upsert"-ing
// a bulk of Fee nodes.
type FeeUpsertBulk struct {
	create *FeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeUpsertBulk) UpdateNewValues() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fee.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FeeUpsertBulk) Ignore() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertBulk) DoNothing() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreateBulk.OnConflict
// documentation for more info.
func (u *FeeUpsertBulk) Update(set func(*FeeUpsert)) *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeUpsertBulk) SetCreatedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeUpsertBulk) AddCreatedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateCreatedAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeUpsertBulk) SetUpdatedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeUpsertBulk) AddUpdatedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateUpdatedAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeUpsertBulk) SetDeletedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeUpsertBulk) AddDeletedAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateDeletedAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FeeUpsertBulk) SetCoinTypeID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateCoinTypeID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FeeUpsertBulk) ClearCoinTypeID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *FeeUpsertBulk) SetFeeCoinTypeID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetFeeCoinTypeID(v)
	})
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateFeeCoinTypeID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateFeeCoinTypeID()
	})
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *FeeUpsertBulk) ClearFeeCoinTypeID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearFeeCoinTypeID()
	})
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsertBulk) SetWithdrawFeeByStableUsd(v bool) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetWithdrawFeeByStableUsd(v)
	})
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateWithdrawFeeByStableUsd() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateWithdrawFeeByStableUsd()
	})
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *FeeUpsertBulk) ClearWithdrawFeeByStableUsd() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearWithdrawFeeByStableUsd()
	})
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *FeeUpsertBulk) SetWithdrawFeeAmount(v decimal.Decimal) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetWithdrawFeeAmount(v)
	})
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateWithdrawFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateWithdrawFeeAmount()
	})
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *FeeUpsertBulk) ClearWithdrawFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearWithdrawFeeAmount()
	})
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *FeeUpsertBulk) SetCollectFeeAmount(v decimal.Decimal) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetCollectFeeAmount(v)
	})
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateCollectFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCollectFeeAmount()
	})
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *FeeUpsertBulk) ClearCollectFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearCollectFeeAmount()
	})
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *FeeUpsertBulk) SetHotWalletFeeAmount(v decimal.Decimal) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetHotWalletFeeAmount(v)
	})
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateHotWalletFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateHotWalletFeeAmount()
	})
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *FeeUpsertBulk) ClearHotWalletFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearHotWalletFeeAmount()
	})
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *FeeUpsertBulk) SetLowFeeAmount(v decimal.Decimal) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetLowFeeAmount(v)
	})
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateLowFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateLowFeeAmount()
	})
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *FeeUpsertBulk) ClearLowFeeAmount() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearLowFeeAmount()
	})
}

// Exec executes the query.
func (u *FeeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
