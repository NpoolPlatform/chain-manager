// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/legalcurrency"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// LegalCurrencyUpdate is the builder for updating LegalCurrency entities.
type LegalCurrencyUpdate struct {
	config
	hooks     []Hook
	mutation  *LegalCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LegalCurrencyUpdate builder.
func (lcu *LegalCurrencyUpdate) Where(ps ...predicate.LegalCurrency) *LegalCurrencyUpdate {
	lcu.mutation.Where(ps...)
	return lcu
}

// SetCreatedAt sets the "created_at" field.
func (lcu *LegalCurrencyUpdate) SetCreatedAt(u uint32) *LegalCurrencyUpdate {
	lcu.mutation.ResetCreatedAt()
	lcu.mutation.SetCreatedAt(u)
	return lcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableCreatedAt(u *uint32) *LegalCurrencyUpdate {
	if u != nil {
		lcu.SetCreatedAt(*u)
	}
	return lcu
}

// AddCreatedAt adds u to the "created_at" field.
func (lcu *LegalCurrencyUpdate) AddCreatedAt(u int32) *LegalCurrencyUpdate {
	lcu.mutation.AddCreatedAt(u)
	return lcu
}

// SetUpdatedAt sets the "updated_at" field.
func (lcu *LegalCurrencyUpdate) SetUpdatedAt(u uint32) *LegalCurrencyUpdate {
	lcu.mutation.ResetUpdatedAt()
	lcu.mutation.SetUpdatedAt(u)
	return lcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (lcu *LegalCurrencyUpdate) AddUpdatedAt(u int32) *LegalCurrencyUpdate {
	lcu.mutation.AddUpdatedAt(u)
	return lcu
}

// SetDeletedAt sets the "deleted_at" field.
func (lcu *LegalCurrencyUpdate) SetDeletedAt(u uint32) *LegalCurrencyUpdate {
	lcu.mutation.ResetDeletedAt()
	lcu.mutation.SetDeletedAt(u)
	return lcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableDeletedAt(u *uint32) *LegalCurrencyUpdate {
	if u != nil {
		lcu.SetDeletedAt(*u)
	}
	return lcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (lcu *LegalCurrencyUpdate) AddDeletedAt(u int32) *LegalCurrencyUpdate {
	lcu.mutation.AddDeletedAt(u)
	return lcu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lcu *LegalCurrencyUpdate) SetCoinTypeID(u uuid.UUID) *LegalCurrencyUpdate {
	lcu.mutation.SetCoinTypeID(u)
	return lcu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableCoinTypeID(u *uuid.UUID) *LegalCurrencyUpdate {
	if u != nil {
		lcu.SetCoinTypeID(*u)
	}
	return lcu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (lcu *LegalCurrencyUpdate) ClearCoinTypeID() *LegalCurrencyUpdate {
	lcu.mutation.ClearCoinTypeID()
	return lcu
}

// SetFeedType sets the "feed_type" field.
func (lcu *LegalCurrencyUpdate) SetFeedType(s string) *LegalCurrencyUpdate {
	lcu.mutation.SetFeedType(s)
	return lcu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableFeedType(s *string) *LegalCurrencyUpdate {
	if s != nil {
		lcu.SetFeedType(*s)
	}
	return lcu
}

// ClearFeedType clears the value of the "feed_type" field.
func (lcu *LegalCurrencyUpdate) ClearFeedType() *LegalCurrencyUpdate {
	lcu.mutation.ClearFeedType()
	return lcu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (lcu *LegalCurrencyUpdate) SetMarketValueHigh(d decimal.Decimal) *LegalCurrencyUpdate {
	lcu.mutation.SetMarketValueHigh(d)
	return lcu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *LegalCurrencyUpdate {
	if d != nil {
		lcu.SetMarketValueHigh(*d)
	}
	return lcu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (lcu *LegalCurrencyUpdate) ClearMarketValueHigh() *LegalCurrencyUpdate {
	lcu.mutation.ClearMarketValueHigh()
	return lcu
}

// SetMarketValueLow sets the "market_value_low" field.
func (lcu *LegalCurrencyUpdate) SetMarketValueLow(d decimal.Decimal) *LegalCurrencyUpdate {
	lcu.mutation.SetMarketValueLow(d)
	return lcu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (lcu *LegalCurrencyUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *LegalCurrencyUpdate {
	if d != nil {
		lcu.SetMarketValueLow(*d)
	}
	return lcu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (lcu *LegalCurrencyUpdate) ClearMarketValueLow() *LegalCurrencyUpdate {
	lcu.mutation.ClearMarketValueLow()
	return lcu
}

// Mutation returns the LegalCurrencyMutation object of the builder.
func (lcu *LegalCurrencyUpdate) Mutation() *LegalCurrencyMutation {
	return lcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lcu *LegalCurrencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := lcu.defaults(); err != nil {
		return 0, err
	}
	if len(lcu.hooks) == 0 {
		affected, err = lcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LegalCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lcu.mutation = mutation
			affected, err = lcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lcu.hooks) - 1; i >= 0; i-- {
			if lcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lcu *LegalCurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := lcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lcu *LegalCurrencyUpdate) Exec(ctx context.Context) error {
	_, err := lcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcu *LegalCurrencyUpdate) ExecX(ctx context.Context) {
	if err := lcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcu *LegalCurrencyUpdate) defaults() error {
	if _, ok := lcu.mutation.UpdatedAt(); !ok {
		if legalcurrency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := legalcurrency.UpdateDefaultUpdatedAt()
		lcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcu *LegalCurrencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LegalCurrencyUpdate {
	lcu.modifiers = append(lcu.modifiers, modifiers...)
	return lcu
}

func (lcu *LegalCurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   legalcurrency.Table,
			Columns: legalcurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: legalcurrency.FieldID,
			},
		},
	}
	if ps := lcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldCreatedAt,
		})
	}
	if value, ok := lcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldCreatedAt,
		})
	}
	if value, ok := lcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := lcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := lcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldDeletedAt,
		})
	}
	if value, ok := lcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldDeletedAt,
		})
	}
	if value, ok := lcu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: legalcurrency.FieldCoinTypeID,
		})
	}
	if lcu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: legalcurrency.FieldCoinTypeID,
		})
	}
	if value, ok := lcu.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: legalcurrency.FieldFeedType,
		})
	}
	if lcu.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: legalcurrency.FieldFeedType,
		})
	}
	if value, ok := lcu.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueHigh,
		})
	}
	if lcu.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: legalcurrency.FieldMarketValueHigh,
		})
	}
	if value, ok := lcu.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueLow,
		})
	}
	if lcu.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: legalcurrency.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = lcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, lcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{legalcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LegalCurrencyUpdateOne is the builder for updating a single LegalCurrency entity.
type LegalCurrencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LegalCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (lcuo *LegalCurrencyUpdateOne) SetCreatedAt(u uint32) *LegalCurrencyUpdateOne {
	lcuo.mutation.ResetCreatedAt()
	lcuo.mutation.SetCreatedAt(u)
	return lcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableCreatedAt(u *uint32) *LegalCurrencyUpdateOne {
	if u != nil {
		lcuo.SetCreatedAt(*u)
	}
	return lcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (lcuo *LegalCurrencyUpdateOne) AddCreatedAt(u int32) *LegalCurrencyUpdateOne {
	lcuo.mutation.AddCreatedAt(u)
	return lcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lcuo *LegalCurrencyUpdateOne) SetUpdatedAt(u uint32) *LegalCurrencyUpdateOne {
	lcuo.mutation.ResetUpdatedAt()
	lcuo.mutation.SetUpdatedAt(u)
	return lcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (lcuo *LegalCurrencyUpdateOne) AddUpdatedAt(u int32) *LegalCurrencyUpdateOne {
	lcuo.mutation.AddUpdatedAt(u)
	return lcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (lcuo *LegalCurrencyUpdateOne) SetDeletedAt(u uint32) *LegalCurrencyUpdateOne {
	lcuo.mutation.ResetDeletedAt()
	lcuo.mutation.SetDeletedAt(u)
	return lcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableDeletedAt(u *uint32) *LegalCurrencyUpdateOne {
	if u != nil {
		lcuo.SetDeletedAt(*u)
	}
	return lcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (lcuo *LegalCurrencyUpdateOne) AddDeletedAt(u int32) *LegalCurrencyUpdateOne {
	lcuo.mutation.AddDeletedAt(u)
	return lcuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lcuo *LegalCurrencyUpdateOne) SetCoinTypeID(u uuid.UUID) *LegalCurrencyUpdateOne {
	lcuo.mutation.SetCoinTypeID(u)
	return lcuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *LegalCurrencyUpdateOne {
	if u != nil {
		lcuo.SetCoinTypeID(*u)
	}
	return lcuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (lcuo *LegalCurrencyUpdateOne) ClearCoinTypeID() *LegalCurrencyUpdateOne {
	lcuo.mutation.ClearCoinTypeID()
	return lcuo
}

// SetFeedType sets the "feed_type" field.
func (lcuo *LegalCurrencyUpdateOne) SetFeedType(s string) *LegalCurrencyUpdateOne {
	lcuo.mutation.SetFeedType(s)
	return lcuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableFeedType(s *string) *LegalCurrencyUpdateOne {
	if s != nil {
		lcuo.SetFeedType(*s)
	}
	return lcuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (lcuo *LegalCurrencyUpdateOne) ClearFeedType() *LegalCurrencyUpdateOne {
	lcuo.mutation.ClearFeedType()
	return lcuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (lcuo *LegalCurrencyUpdateOne) SetMarketValueHigh(d decimal.Decimal) *LegalCurrencyUpdateOne {
	lcuo.mutation.SetMarketValueHigh(d)
	return lcuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *LegalCurrencyUpdateOne {
	if d != nil {
		lcuo.SetMarketValueHigh(*d)
	}
	return lcuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (lcuo *LegalCurrencyUpdateOne) ClearMarketValueHigh() *LegalCurrencyUpdateOne {
	lcuo.mutation.ClearMarketValueHigh()
	return lcuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (lcuo *LegalCurrencyUpdateOne) SetMarketValueLow(d decimal.Decimal) *LegalCurrencyUpdateOne {
	lcuo.mutation.SetMarketValueLow(d)
	return lcuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (lcuo *LegalCurrencyUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *LegalCurrencyUpdateOne {
	if d != nil {
		lcuo.SetMarketValueLow(*d)
	}
	return lcuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (lcuo *LegalCurrencyUpdateOne) ClearMarketValueLow() *LegalCurrencyUpdateOne {
	lcuo.mutation.ClearMarketValueLow()
	return lcuo
}

// Mutation returns the LegalCurrencyMutation object of the builder.
func (lcuo *LegalCurrencyUpdateOne) Mutation() *LegalCurrencyMutation {
	return lcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lcuo *LegalCurrencyUpdateOne) Select(field string, fields ...string) *LegalCurrencyUpdateOne {
	lcuo.fields = append([]string{field}, fields...)
	return lcuo
}

// Save executes the query and returns the updated LegalCurrency entity.
func (lcuo *LegalCurrencyUpdateOne) Save(ctx context.Context) (*LegalCurrency, error) {
	var (
		err  error
		node *LegalCurrency
	)
	if err := lcuo.defaults(); err != nil {
		return nil, err
	}
	if len(lcuo.hooks) == 0 {
		node, err = lcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LegalCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lcuo.mutation = mutation
			node, err = lcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lcuo.hooks) - 1; i >= 0; i-- {
			if lcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LegalCurrency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LegalCurrencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lcuo *LegalCurrencyUpdateOne) SaveX(ctx context.Context) *LegalCurrency {
	node, err := lcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lcuo *LegalCurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := lcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcuo *LegalCurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := lcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcuo *LegalCurrencyUpdateOne) defaults() error {
	if _, ok := lcuo.mutation.UpdatedAt(); !ok {
		if legalcurrency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := legalcurrency.UpdateDefaultUpdatedAt()
		lcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcuo *LegalCurrencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LegalCurrencyUpdateOne {
	lcuo.modifiers = append(lcuo.modifiers, modifiers...)
	return lcuo
}

func (lcuo *LegalCurrencyUpdateOne) sqlSave(ctx context.Context) (_node *LegalCurrency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   legalcurrency.Table,
			Columns: legalcurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: legalcurrency.FieldID,
			},
		},
	}
	id, ok := lcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LegalCurrency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, legalcurrency.FieldID)
		for _, f := range fields {
			if !legalcurrency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != legalcurrency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldCreatedAt,
		})
	}
	if value, ok := lcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldCreatedAt,
		})
	}
	if value, ok := lcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := lcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := lcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldDeletedAt,
		})
	}
	if value, ok := lcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldDeletedAt,
		})
	}
	if value, ok := lcuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: legalcurrency.FieldCoinTypeID,
		})
	}
	if lcuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: legalcurrency.FieldCoinTypeID,
		})
	}
	if value, ok := lcuo.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: legalcurrency.FieldFeedType,
		})
	}
	if lcuo.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: legalcurrency.FieldFeedType,
		})
	}
	if value, ok := lcuo.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueHigh,
		})
	}
	if lcuo.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: legalcurrency.FieldMarketValueHigh,
		})
	}
	if value, ok := lcuo.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueLow,
		})
	}
	if lcuo.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: legalcurrency.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = lcuo.modifiers
	_node = &LegalCurrency{config: lcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{legalcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
