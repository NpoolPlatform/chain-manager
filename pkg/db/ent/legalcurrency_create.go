// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/legalcurrency"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// LegalCurrencyCreate is the builder for creating a LegalCurrency entity.
type LegalCurrencyCreate struct {
	config
	mutation *LegalCurrencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lcc *LegalCurrencyCreate) SetCreatedAt(u uint32) *LegalCurrencyCreate {
	lcc.mutation.SetCreatedAt(u)
	return lcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableCreatedAt(u *uint32) *LegalCurrencyCreate {
	if u != nil {
		lcc.SetCreatedAt(*u)
	}
	return lcc
}

// SetUpdatedAt sets the "updated_at" field.
func (lcc *LegalCurrencyCreate) SetUpdatedAt(u uint32) *LegalCurrencyCreate {
	lcc.mutation.SetUpdatedAt(u)
	return lcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableUpdatedAt(u *uint32) *LegalCurrencyCreate {
	if u != nil {
		lcc.SetUpdatedAt(*u)
	}
	return lcc
}

// SetDeletedAt sets the "deleted_at" field.
func (lcc *LegalCurrencyCreate) SetDeletedAt(u uint32) *LegalCurrencyCreate {
	lcc.mutation.SetDeletedAt(u)
	return lcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableDeletedAt(u *uint32) *LegalCurrencyCreate {
	if u != nil {
		lcc.SetDeletedAt(*u)
	}
	return lcc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lcc *LegalCurrencyCreate) SetCoinTypeID(u uuid.UUID) *LegalCurrencyCreate {
	lcc.mutation.SetCoinTypeID(u)
	return lcc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableCoinTypeID(u *uuid.UUID) *LegalCurrencyCreate {
	if u != nil {
		lcc.SetCoinTypeID(*u)
	}
	return lcc
}

// SetFeedType sets the "feed_type" field.
func (lcc *LegalCurrencyCreate) SetFeedType(s string) *LegalCurrencyCreate {
	lcc.mutation.SetFeedType(s)
	return lcc
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableFeedType(s *string) *LegalCurrencyCreate {
	if s != nil {
		lcc.SetFeedType(*s)
	}
	return lcc
}

// SetMarketValueHigh sets the "market_value_high" field.
func (lcc *LegalCurrencyCreate) SetMarketValueHigh(d decimal.Decimal) *LegalCurrencyCreate {
	lcc.mutation.SetMarketValueHigh(d)
	return lcc
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableMarketValueHigh(d *decimal.Decimal) *LegalCurrencyCreate {
	if d != nil {
		lcc.SetMarketValueHigh(*d)
	}
	return lcc
}

// SetMarketValueLow sets the "market_value_low" field.
func (lcc *LegalCurrencyCreate) SetMarketValueLow(d decimal.Decimal) *LegalCurrencyCreate {
	lcc.mutation.SetMarketValueLow(d)
	return lcc
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableMarketValueLow(d *decimal.Decimal) *LegalCurrencyCreate {
	if d != nil {
		lcc.SetMarketValueLow(*d)
	}
	return lcc
}

// SetID sets the "id" field.
func (lcc *LegalCurrencyCreate) SetID(u uuid.UUID) *LegalCurrencyCreate {
	lcc.mutation.SetID(u)
	return lcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lcc *LegalCurrencyCreate) SetNillableID(u *uuid.UUID) *LegalCurrencyCreate {
	if u != nil {
		lcc.SetID(*u)
	}
	return lcc
}

// Mutation returns the LegalCurrencyMutation object of the builder.
func (lcc *LegalCurrencyCreate) Mutation() *LegalCurrencyMutation {
	return lcc.mutation
}

// Save creates the LegalCurrency in the database.
func (lcc *LegalCurrencyCreate) Save(ctx context.Context) (*LegalCurrency, error) {
	var (
		err  error
		node *LegalCurrency
	)
	if err := lcc.defaults(); err != nil {
		return nil, err
	}
	if len(lcc.hooks) == 0 {
		if err = lcc.check(); err != nil {
			return nil, err
		}
		node, err = lcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LegalCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lcc.check(); err != nil {
				return nil, err
			}
			lcc.mutation = mutation
			if node, err = lcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lcc.hooks) - 1; i >= 0; i-- {
			if lcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LegalCurrency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LegalCurrencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LegalCurrencyCreate) SaveX(ctx context.Context) *LegalCurrency {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LegalCurrencyCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LegalCurrencyCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcc *LegalCurrencyCreate) defaults() error {
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		if legalcurrency.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := legalcurrency.DefaultCreatedAt()
		lcc.mutation.SetCreatedAt(v)
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		if legalcurrency.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := legalcurrency.DefaultUpdatedAt()
		lcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lcc.mutation.DeletedAt(); !ok {
		if legalcurrency.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := legalcurrency.DefaultDeletedAt()
		lcc.mutation.SetDeletedAt(v)
	}
	if _, ok := lcc.mutation.CoinTypeID(); !ok {
		if legalcurrency.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := legalcurrency.DefaultCoinTypeID()
		lcc.mutation.SetCoinTypeID(v)
	}
	if _, ok := lcc.mutation.FeedType(); !ok {
		v := legalcurrency.DefaultFeedType
		lcc.mutation.SetFeedType(v)
	}
	if _, ok := lcc.mutation.MarketValueHigh(); !ok {
		v := legalcurrency.DefaultMarketValueHigh
		lcc.mutation.SetMarketValueHigh(v)
	}
	if _, ok := lcc.mutation.MarketValueLow(); !ok {
		v := legalcurrency.DefaultMarketValueLow
		lcc.mutation.SetMarketValueLow(v)
	}
	if _, ok := lcc.mutation.ID(); !ok {
		if legalcurrency.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized legalcurrency.DefaultID (forgotten import ent/runtime?)")
		}
		v := legalcurrency.DefaultID()
		lcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LegalCurrencyCreate) check() error {
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LegalCurrency.created_at"`)}
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LegalCurrency.updated_at"`)}
	}
	if _, ok := lcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "LegalCurrency.deleted_at"`)}
	}
	return nil
}

func (lcc *LegalCurrencyCreate) sqlSave(ctx context.Context) (*LegalCurrency, error) {
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lcc *LegalCurrencyCreate) createSpec() (*LegalCurrency, *sqlgraph.CreateSpec) {
	var (
		_node = &LegalCurrency{config: lcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: legalcurrency.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: legalcurrency.FieldID,
			},
		}
	)
	_spec.OnConflict = lcc.conflict
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: legalcurrency.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := lcc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: legalcurrency.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := lcc.mutation.FeedType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: legalcurrency.FieldFeedType,
		})
		_node.FeedType = value
	}
	if value, ok := lcc.mutation.MarketValueHigh(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueHigh,
		})
		_node.MarketValueHigh = value
	}
	if value, ok := lcc.mutation.MarketValueLow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: legalcurrency.FieldMarketValueLow,
		})
		_node.MarketValueLow = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LegalCurrency.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LegalCurrencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lcc *LegalCurrencyCreate) OnConflict(opts ...sql.ConflictOption) *LegalCurrencyUpsertOne {
	lcc.conflict = opts
	return &LegalCurrencyUpsertOne{
		create: lcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LegalCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcc *LegalCurrencyCreate) OnConflictColumns(columns ...string) *LegalCurrencyUpsertOne {
	lcc.conflict = append(lcc.conflict, sql.ConflictColumns(columns...))
	return &LegalCurrencyUpsertOne{
		create: lcc,
	}
}

type (
	// LegalCurrencyUpsertOne is the builder for "upsert"-ing
	//  one LegalCurrency node.
	LegalCurrencyUpsertOne struct {
		create *LegalCurrencyCreate
	}

	// LegalCurrencyUpsert is the "OnConflict" setter.
	LegalCurrencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LegalCurrencyUpsert) SetCreatedAt(v uint32) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateCreatedAt() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LegalCurrencyUpsert) AddCreatedAt(v uint32) *LegalCurrencyUpsert {
	u.Add(legalcurrency.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LegalCurrencyUpsert) SetUpdatedAt(v uint32) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateUpdatedAt() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LegalCurrencyUpsert) AddUpdatedAt(v uint32) *LegalCurrencyUpsert {
	u.Add(legalcurrency.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LegalCurrencyUpsert) SetDeletedAt(v uint32) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateDeletedAt() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LegalCurrencyUpsert) AddDeletedAt(v uint32) *LegalCurrencyUpsert {
	u.Add(legalcurrency.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LegalCurrencyUpsert) SetCoinTypeID(v uuid.UUID) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateCoinTypeID() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LegalCurrencyUpsert) ClearCoinTypeID() *LegalCurrencyUpsert {
	u.SetNull(legalcurrency.FieldCoinTypeID)
	return u
}

// SetFeedType sets the "feed_type" field.
func (u *LegalCurrencyUpsert) SetFeedType(v string) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldFeedType, v)
	return u
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateFeedType() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldFeedType)
	return u
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LegalCurrencyUpsert) ClearFeedType() *LegalCurrencyUpsert {
	u.SetNull(legalcurrency.FieldFeedType)
	return u
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LegalCurrencyUpsert) SetMarketValueHigh(v decimal.Decimal) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldMarketValueHigh, v)
	return u
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateMarketValueHigh() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldMarketValueHigh)
	return u
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LegalCurrencyUpsert) ClearMarketValueHigh() *LegalCurrencyUpsert {
	u.SetNull(legalcurrency.FieldMarketValueHigh)
	return u
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LegalCurrencyUpsert) SetMarketValueLow(v decimal.Decimal) *LegalCurrencyUpsert {
	u.Set(legalcurrency.FieldMarketValueLow, v)
	return u
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LegalCurrencyUpsert) UpdateMarketValueLow() *LegalCurrencyUpsert {
	u.SetExcluded(legalcurrency.FieldMarketValueLow)
	return u
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LegalCurrencyUpsert) ClearMarketValueLow() *LegalCurrencyUpsert {
	u.SetNull(legalcurrency.FieldMarketValueLow)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LegalCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(legalcurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LegalCurrencyUpsertOne) UpdateNewValues() *LegalCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(legalcurrency.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.LegalCurrency.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LegalCurrencyUpsertOne) Ignore() *LegalCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LegalCurrencyUpsertOne) DoNothing() *LegalCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LegalCurrencyCreate.OnConflict
// documentation for more info.
func (u *LegalCurrencyUpsertOne) Update(set func(*LegalCurrencyUpsert)) *LegalCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LegalCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LegalCurrencyUpsertOne) SetCreatedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LegalCurrencyUpsertOne) AddCreatedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateCreatedAt() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LegalCurrencyUpsertOne) SetUpdatedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LegalCurrencyUpsertOne) AddUpdatedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateUpdatedAt() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LegalCurrencyUpsertOne) SetDeletedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LegalCurrencyUpsertOne) AddDeletedAt(v uint32) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateDeletedAt() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LegalCurrencyUpsertOne) SetCoinTypeID(v uuid.UUID) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateCoinTypeID() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LegalCurrencyUpsertOne) ClearCoinTypeID() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *LegalCurrencyUpsertOne) SetFeedType(v string) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateFeedType() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LegalCurrencyUpsertOne) ClearFeedType() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LegalCurrencyUpsertOne) SetMarketValueHigh(v decimal.Decimal) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateMarketValueHigh() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LegalCurrencyUpsertOne) ClearMarketValueHigh() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearMarketValueHigh()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LegalCurrencyUpsertOne) SetMarketValueLow(v decimal.Decimal) *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LegalCurrencyUpsertOne) UpdateMarketValueLow() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LegalCurrencyUpsertOne) ClearMarketValueLow() *LegalCurrencyUpsertOne {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearMarketValueLow()
	})
}

// Exec executes the query.
func (u *LegalCurrencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LegalCurrencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LegalCurrencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LegalCurrencyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LegalCurrencyUpsertOne.ID is not supported by MySQL driver. Use LegalCurrencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LegalCurrencyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LegalCurrencyCreateBulk is the builder for creating many LegalCurrency entities in bulk.
type LegalCurrencyCreateBulk struct {
	config
	builders []*LegalCurrencyCreate
	conflict []sql.ConflictOption
}

// Save creates the LegalCurrency entities in the database.
func (lccb *LegalCurrencyCreateBulk) Save(ctx context.Context) ([]*LegalCurrency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LegalCurrency, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LegalCurrencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LegalCurrencyCreateBulk) SaveX(ctx context.Context) []*LegalCurrency {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LegalCurrencyCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LegalCurrencyCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LegalCurrency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LegalCurrencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lccb *LegalCurrencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *LegalCurrencyUpsertBulk {
	lccb.conflict = opts
	return &LegalCurrencyUpsertBulk{
		create: lccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LegalCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lccb *LegalCurrencyCreateBulk) OnConflictColumns(columns ...string) *LegalCurrencyUpsertBulk {
	lccb.conflict = append(lccb.conflict, sql.ConflictColumns(columns...))
	return &LegalCurrencyUpsertBulk{
		create: lccb,
	}
}

// LegalCurrencyUpsertBulk is the builder for "upsert"-ing
// a bulk of LegalCurrency nodes.
type LegalCurrencyUpsertBulk struct {
	create *LegalCurrencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LegalCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(legalcurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LegalCurrencyUpsertBulk) UpdateNewValues() *LegalCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(legalcurrency.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LegalCurrency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LegalCurrencyUpsertBulk) Ignore() *LegalCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LegalCurrencyUpsertBulk) DoNothing() *LegalCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LegalCurrencyCreateBulk.OnConflict
// documentation for more info.
func (u *LegalCurrencyUpsertBulk) Update(set func(*LegalCurrencyUpsert)) *LegalCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LegalCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LegalCurrencyUpsertBulk) SetCreatedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LegalCurrencyUpsertBulk) AddCreatedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateCreatedAt() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LegalCurrencyUpsertBulk) SetUpdatedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LegalCurrencyUpsertBulk) AddUpdatedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateUpdatedAt() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LegalCurrencyUpsertBulk) SetDeletedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LegalCurrencyUpsertBulk) AddDeletedAt(v uint32) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateDeletedAt() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LegalCurrencyUpsertBulk) SetCoinTypeID(v uuid.UUID) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateCoinTypeID() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LegalCurrencyUpsertBulk) ClearCoinTypeID() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *LegalCurrencyUpsertBulk) SetFeedType(v string) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateFeedType() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LegalCurrencyUpsertBulk) ClearFeedType() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LegalCurrencyUpsertBulk) SetMarketValueHigh(v decimal.Decimal) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateMarketValueHigh() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LegalCurrencyUpsertBulk) ClearMarketValueHigh() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearMarketValueHigh()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LegalCurrencyUpsertBulk) SetMarketValueLow(v decimal.Decimal) *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LegalCurrencyUpsertBulk) UpdateMarketValueLow() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LegalCurrencyUpsertBulk) ClearMarketValueLow() *LegalCurrencyUpsertBulk {
	return u.Update(func(s *LegalCurrencyUpsert) {
		s.ClearMarketValueLow()
	})
}

// Exec executes the query.
func (u *LegalCurrencyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LegalCurrencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LegalCurrencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LegalCurrencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
