// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/currencyvalue"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CurrencyValueQuery is the builder for querying CurrencyValue entities.
type CurrencyValueQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CurrencyValue
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CurrencyValueQuery builder.
func (cvq *CurrencyValueQuery) Where(ps ...predicate.CurrencyValue) *CurrencyValueQuery {
	cvq.predicates = append(cvq.predicates, ps...)
	return cvq
}

// Limit adds a limit step to the query.
func (cvq *CurrencyValueQuery) Limit(limit int) *CurrencyValueQuery {
	cvq.limit = &limit
	return cvq
}

// Offset adds an offset step to the query.
func (cvq *CurrencyValueQuery) Offset(offset int) *CurrencyValueQuery {
	cvq.offset = &offset
	return cvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cvq *CurrencyValueQuery) Unique(unique bool) *CurrencyValueQuery {
	cvq.unique = &unique
	return cvq
}

// Order adds an order step to the query.
func (cvq *CurrencyValueQuery) Order(o ...OrderFunc) *CurrencyValueQuery {
	cvq.order = append(cvq.order, o...)
	return cvq
}

// First returns the first CurrencyValue entity from the query.
// Returns a *NotFoundError when no CurrencyValue was found.
func (cvq *CurrencyValueQuery) First(ctx context.Context) (*CurrencyValue, error) {
	nodes, err := cvq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{currencyvalue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cvq *CurrencyValueQuery) FirstX(ctx context.Context) *CurrencyValue {
	node, err := cvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CurrencyValue ID from the query.
// Returns a *NotFoundError when no CurrencyValue ID was found.
func (cvq *CurrencyValueQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cvq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{currencyvalue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cvq *CurrencyValueQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CurrencyValue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CurrencyValue entity is found.
// Returns a *NotFoundError when no CurrencyValue entities are found.
func (cvq *CurrencyValueQuery) Only(ctx context.Context) (*CurrencyValue, error) {
	nodes, err := cvq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{currencyvalue.Label}
	default:
		return nil, &NotSingularError{currencyvalue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cvq *CurrencyValueQuery) OnlyX(ctx context.Context) *CurrencyValue {
	node, err := cvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CurrencyValue ID in the query.
// Returns a *NotSingularError when more than one CurrencyValue ID is found.
// Returns a *NotFoundError when no entities are found.
func (cvq *CurrencyValueQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cvq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{currencyvalue.Label}
	default:
		err = &NotSingularError{currencyvalue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cvq *CurrencyValueQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CurrencyValues.
func (cvq *CurrencyValueQuery) All(ctx context.Context) ([]*CurrencyValue, error) {
	if err := cvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cvq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cvq *CurrencyValueQuery) AllX(ctx context.Context) []*CurrencyValue {
	nodes, err := cvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CurrencyValue IDs.
func (cvq *CurrencyValueQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := cvq.Select(currencyvalue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cvq *CurrencyValueQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cvq *CurrencyValueQuery) Count(ctx context.Context) (int, error) {
	if err := cvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cvq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cvq *CurrencyValueQuery) CountX(ctx context.Context) int {
	count, err := cvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cvq *CurrencyValueQuery) Exist(ctx context.Context) (bool, error) {
	if err := cvq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cvq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cvq *CurrencyValueQuery) ExistX(ctx context.Context) bool {
	exist, err := cvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CurrencyValueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cvq *CurrencyValueQuery) Clone() *CurrencyValueQuery {
	if cvq == nil {
		return nil
	}
	return &CurrencyValueQuery{
		config:     cvq.config,
		limit:      cvq.limit,
		offset:     cvq.offset,
		order:      append([]OrderFunc{}, cvq.order...),
		predicates: append([]predicate.CurrencyValue{}, cvq.predicates...),
		// clone intermediate query.
		sql:    cvq.sql.Clone(),
		path:   cvq.path,
		unique: cvq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CurrencyValue.Query().
//		GroupBy(currencyvalue.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cvq *CurrencyValueQuery) GroupBy(field string, fields ...string) *CurrencyValueGroupBy {
	grbuild := &CurrencyValueGroupBy{config: cvq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cvq.sqlQuery(ctx), nil
	}
	grbuild.label = currencyvalue.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//	}
//
//	client.CurrencyValue.Query().
//		Select(currencyvalue.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (cvq *CurrencyValueQuery) Select(fields ...string) *CurrencyValueSelect {
	cvq.fields = append(cvq.fields, fields...)
	selbuild := &CurrencyValueSelect{CurrencyValueQuery: cvq}
	selbuild.label = currencyvalue.Label
	selbuild.flds, selbuild.scan = &cvq.fields, selbuild.Scan
	return selbuild
}

func (cvq *CurrencyValueQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cvq.fields {
		if !currencyvalue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cvq.path != nil {
		prev, err := cvq.path(ctx)
		if err != nil {
			return err
		}
		cvq.sql = prev
	}
	if currencyvalue.Policy == nil {
		return errors.New("ent: uninitialized currencyvalue.Policy (forgotten import ent/runtime?)")
	}
	if err := currencyvalue.Policy.EvalQuery(ctx, cvq); err != nil {
		return err
	}
	return nil
}

func (cvq *CurrencyValueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CurrencyValue, error) {
	var (
		nodes = []*CurrencyValue{}
		_spec = cvq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*CurrencyValue).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &CurrencyValue{config: cvq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cvq *CurrencyValueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cvq.querySpec()
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	_spec.Node.Columns = cvq.fields
	if len(cvq.fields) > 0 {
		_spec.Unique = cvq.unique != nil && *cvq.unique
	}
	return sqlgraph.CountNodes(ctx, cvq.driver, _spec)
}

func (cvq *CurrencyValueQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cvq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cvq *CurrencyValueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   currencyvalue.Table,
			Columns: currencyvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: currencyvalue.FieldID,
			},
		},
		From:   cvq.sql,
		Unique: true,
	}
	if unique := cvq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cvq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyvalue.FieldID)
		for i := range fields {
			if fields[i] != currencyvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cvq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cvq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cvq *CurrencyValueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cvq.driver.Dialect())
	t1 := builder.Table(currencyvalue.Table)
	columns := cvq.fields
	if len(columns) == 0 {
		columns = currencyvalue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cvq.sql != nil {
		selector = cvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cvq.unique != nil && *cvq.unique {
		selector.Distinct()
	}
	for _, m := range cvq.modifiers {
		m(selector)
	}
	for _, p := range cvq.predicates {
		p(selector)
	}
	for _, p := range cvq.order {
		p(selector)
	}
	if offset := cvq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cvq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (cvq *CurrencyValueQuery) ForUpdate(opts ...sql.LockOption) *CurrencyValueQuery {
	if cvq.driver.Dialect() == dialect.Postgres {
		cvq.Unique(false)
	}
	cvq.modifiers = append(cvq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return cvq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (cvq *CurrencyValueQuery) ForShare(opts ...sql.LockOption) *CurrencyValueQuery {
	if cvq.driver.Dialect() == dialect.Postgres {
		cvq.Unique(false)
	}
	cvq.modifiers = append(cvq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return cvq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cvq *CurrencyValueQuery) Modify(modifiers ...func(s *sql.Selector)) *CurrencyValueSelect {
	cvq.modifiers = append(cvq.modifiers, modifiers...)
	return cvq.Select()
}

// CurrencyValueGroupBy is the group-by builder for CurrencyValue entities.
type CurrencyValueGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cvgb *CurrencyValueGroupBy) Aggregate(fns ...AggregateFunc) *CurrencyValueGroupBy {
	cvgb.fns = append(cvgb.fns, fns...)
	return cvgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cvgb *CurrencyValueGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cvgb.path(ctx)
	if err != nil {
		return err
	}
	cvgb.sql = query
	return cvgb.sqlScan(ctx, v)
}

func (cvgb *CurrencyValueGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cvgb.fields {
		if !currencyvalue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cvgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cvgb *CurrencyValueGroupBy) sqlQuery() *sql.Selector {
	selector := cvgb.sql.Select()
	aggregation := make([]string, 0, len(cvgb.fns))
	for _, fn := range cvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cvgb.fields)+len(cvgb.fns))
		for _, f := range cvgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cvgb.fields...)...)
}

// CurrencyValueSelect is the builder for selecting fields of CurrencyValue entities.
type CurrencyValueSelect struct {
	*CurrencyValueQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cvs *CurrencyValueSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cvs.prepareQuery(ctx); err != nil {
		return err
	}
	cvs.sql = cvs.CurrencyValueQuery.sqlQuery(ctx)
	return cvs.sqlScan(ctx, v)
}

func (cvs *CurrencyValueSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cvs.sql.Query()
	if err := cvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cvs *CurrencyValueSelect) Modify(modifiers ...func(s *sql.Selector)) *CurrencyValueSelect {
	cvs.modifiers = append(cvs.modifiers, modifiers...)
	return cvs
}
