// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/tran"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tran.Table,
			Columns: tran.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tran.FieldID,
			},
		},
		Type: "Tran",
		Fields: map[string]*sqlgraph.FieldSpec{
			tran.FieldCreatedAt:     {Type: field.TypeUint32, Column: tran.FieldCreatedAt},
			tran.FieldUpdatedAt:     {Type: field.TypeUint32, Column: tran.FieldUpdatedAt},
			tran.FieldDeletedAt:     {Type: field.TypeUint32, Column: tran.FieldDeletedAt},
			tran.FieldFromAccountID: {Type: field.TypeUUID, Column: tran.FieldFromAccountID},
			tran.FieldToAccountID:   {Type: field.TypeUUID, Column: tran.FieldToAccountID},
			tran.FieldAmount:        {Type: field.TypeOther, Column: tran.FieldAmount},
			tran.FieldFeeAmount:     {Type: field.TypeOther, Column: tran.FieldFeeAmount},
			tran.FieldChainTxID:     {Type: field.TypeString, Column: tran.FieldChainTxID},
			tran.FieldState:         {Type: field.TypeString, Column: tran.FieldState},
			tran.FieldExtra:         {Type: field.TypeString, Column: tran.FieldExtra},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (tq *TranQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TranQuery builder.
func (tq *TranQuery) Filter() *TranFilter {
	return &TranFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TranMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TranMutation builder.
func (m *TranMutation) Filter() *TranFilter {
	return &TranFilter{config: m.config, predicateAdder: m}
}

// TranFilter provides a generic filtering capability at runtime for TranQuery.
type TranFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TranFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TranFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(tran.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TranFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(tran.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TranFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(tran.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TranFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(tran.FieldDeletedAt))
}

// WhereFromAccountID applies the entql [16]byte predicate on the from_account_id field.
func (f *TranFilter) WhereFromAccountID(p entql.ValueP) {
	f.Where(p.Field(tran.FieldFromAccountID))
}

// WhereToAccountID applies the entql [16]byte predicate on the to_account_id field.
func (f *TranFilter) WhereToAccountID(p entql.ValueP) {
	f.Where(p.Field(tran.FieldToAccountID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *TranFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(tran.FieldAmount))
}

// WhereFeeAmount applies the entql other predicate on the fee_amount field.
func (f *TranFilter) WhereFeeAmount(p entql.OtherP) {
	f.Where(p.Field(tran.FieldFeeAmount))
}

// WhereChainTxID applies the entql string predicate on the chain_tx_id field.
func (f *TranFilter) WhereChainTxID(p entql.StringP) {
	f.Where(p.Field(tran.FieldChainTxID))
}

// WhereState applies the entql string predicate on the state field.
func (f *TranFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(tran.FieldState))
}

// WhereExtra applies the entql string predicate on the extra field.
func (f *TranFilter) WhereExtra(p entql.StringP) {
	f.Where(p.Field(tran.FieldExtra))
}
