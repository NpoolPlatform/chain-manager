// Code generated by ent, DO NOT EDIT.

package currencyfeed

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// FeedSource applies equality check predicate on the "feed_source" field. It's identical to FeedSourceEQ.
func FeedSource(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedSource), v))
	})
}

// FeedType applies equality check predicate on the "feed_type" field. It's identical to FeedTypeEQ.
func FeedType(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// FeedSourceEQ applies the EQ predicate on the "feed_source" field.
func FeedSourceEQ(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedSource), v))
	})
}

// FeedSourceNEQ applies the NEQ predicate on the "feed_source" field.
func FeedSourceNEQ(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedSource), v))
	})
}

// FeedSourceIn applies the In predicate on the "feed_source" field.
func FeedSourceIn(vs ...string) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedSource), v...))
	})
}

// FeedSourceNotIn applies the NotIn predicate on the "feed_source" field.
func FeedSourceNotIn(vs ...string) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedSource), v...))
	})
}

// FeedSourceGT applies the GT predicate on the "feed_source" field.
func FeedSourceGT(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedSource), v))
	})
}

// FeedSourceGTE applies the GTE predicate on the "feed_source" field.
func FeedSourceGTE(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedSource), v))
	})
}

// FeedSourceLT applies the LT predicate on the "feed_source" field.
func FeedSourceLT(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedSource), v))
	})
}

// FeedSourceLTE applies the LTE predicate on the "feed_source" field.
func FeedSourceLTE(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedSource), v))
	})
}

// FeedSourceContains applies the Contains predicate on the "feed_source" field.
func FeedSourceContains(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedSource), v))
	})
}

// FeedSourceHasPrefix applies the HasPrefix predicate on the "feed_source" field.
func FeedSourceHasPrefix(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedSource), v))
	})
}

// FeedSourceHasSuffix applies the HasSuffix predicate on the "feed_source" field.
func FeedSourceHasSuffix(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedSource), v))
	})
}

// FeedSourceIsNil applies the IsNil predicate on the "feed_source" field.
func FeedSourceIsNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedSource)))
	})
}

// FeedSourceNotNil applies the NotNil predicate on the "feed_source" field.
func FeedSourceNotNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedSource)))
	})
}

// FeedSourceEqualFold applies the EqualFold predicate on the "feed_source" field.
func FeedSourceEqualFold(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedSource), v))
	})
}

// FeedSourceContainsFold applies the ContainsFold predicate on the "feed_source" field.
func FeedSourceContainsFold(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedSource), v))
	})
}

// FeedTypeEQ applies the EQ predicate on the "feed_type" field.
func FeedTypeEQ(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedType), v))
	})
}

// FeedTypeNEQ applies the NEQ predicate on the "feed_type" field.
func FeedTypeNEQ(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedType), v))
	})
}

// FeedTypeIn applies the In predicate on the "feed_type" field.
func FeedTypeIn(vs ...string) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedType), v...))
	})
}

// FeedTypeNotIn applies the NotIn predicate on the "feed_type" field.
func FeedTypeNotIn(vs ...string) predicate.CurrencyFeed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedType), v...))
	})
}

// FeedTypeGT applies the GT predicate on the "feed_type" field.
func FeedTypeGT(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedType), v))
	})
}

// FeedTypeGTE applies the GTE predicate on the "feed_type" field.
func FeedTypeGTE(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedType), v))
	})
}

// FeedTypeLT applies the LT predicate on the "feed_type" field.
func FeedTypeLT(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedType), v))
	})
}

// FeedTypeLTE applies the LTE predicate on the "feed_type" field.
func FeedTypeLTE(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedType), v))
	})
}

// FeedTypeContains applies the Contains predicate on the "feed_type" field.
func FeedTypeContains(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedType), v))
	})
}

// FeedTypeHasPrefix applies the HasPrefix predicate on the "feed_type" field.
func FeedTypeHasPrefix(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedType), v))
	})
}

// FeedTypeHasSuffix applies the HasSuffix predicate on the "feed_type" field.
func FeedTypeHasSuffix(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedType), v))
	})
}

// FeedTypeIsNil applies the IsNil predicate on the "feed_type" field.
func FeedTypeIsNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedType)))
	})
}

// FeedTypeNotNil applies the NotNil predicate on the "feed_type" field.
func FeedTypeNotNil() predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedType)))
	})
}

// FeedTypeEqualFold applies the EqualFold predicate on the "feed_type" field.
func FeedTypeEqualFold(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedType), v))
	})
}

// FeedTypeContainsFold applies the ContainsFold predicate on the "feed_type" field.
func FeedTypeContainsFold(v string) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CurrencyFeed) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CurrencyFeed) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CurrencyFeed) predicate.CurrencyFeed {
	return predicate.CurrencyFeed(func(s *sql.Selector) {
		p(s.Not())
	})
}
