// Code generated by ent, DO NOT EDIT.

package currencyvalue

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// FeedSourceID applies equality check predicate on the "feed_source_id" field. It's identical to FeedSourceIDEQ.
func FeedSourceID(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedSourceID), v))
	})
}

// MarketValueHigh applies equality check predicate on the "market_value_high" field. It's identical to MarketValueHighEQ.
func MarketValueHigh(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueLow applies equality check predicate on the "market_value_low" field. It's identical to MarketValueLowEQ.
func MarketValueLow(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValueLow), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// FeedSourceIDEQ applies the EQ predicate on the "feed_source_id" field.
func FeedSourceIDEQ(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDNEQ applies the NEQ predicate on the "feed_source_id" field.
func FeedSourceIDNEQ(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDIn applies the In predicate on the "feed_source_id" field.
func FeedSourceIDIn(vs ...uuid.UUID) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedSourceID), v...))
	})
}

// FeedSourceIDNotIn applies the NotIn predicate on the "feed_source_id" field.
func FeedSourceIDNotIn(vs ...uuid.UUID) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedSourceID), v...))
	})
}

// FeedSourceIDGT applies the GT predicate on the "feed_source_id" field.
func FeedSourceIDGT(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDGTE applies the GTE predicate on the "feed_source_id" field.
func FeedSourceIDGTE(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDLT applies the LT predicate on the "feed_source_id" field.
func FeedSourceIDLT(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDLTE applies the LTE predicate on the "feed_source_id" field.
func FeedSourceIDLTE(v uuid.UUID) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedSourceID), v))
	})
}

// FeedSourceIDIsNil applies the IsNil predicate on the "feed_source_id" field.
func FeedSourceIDIsNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedSourceID)))
	})
}

// FeedSourceIDNotNil applies the NotNil predicate on the "feed_source_id" field.
func FeedSourceIDNotNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedSourceID)))
	})
}

// MarketValueHighEQ applies the EQ predicate on the "market_value_high" field.
func MarketValueHighEQ(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighNEQ applies the NEQ predicate on the "market_value_high" field.
func MarketValueHighNEQ(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighIn applies the In predicate on the "market_value_high" field.
func MarketValueHighIn(vs ...decimal.Decimal) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMarketValueHigh), v...))
	})
}

// MarketValueHighNotIn applies the NotIn predicate on the "market_value_high" field.
func MarketValueHighNotIn(vs ...decimal.Decimal) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMarketValueHigh), v...))
	})
}

// MarketValueHighGT applies the GT predicate on the "market_value_high" field.
func MarketValueHighGT(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighGTE applies the GTE predicate on the "market_value_high" field.
func MarketValueHighGTE(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighLT applies the LT predicate on the "market_value_high" field.
func MarketValueHighLT(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighLTE applies the LTE predicate on the "market_value_high" field.
func MarketValueHighLTE(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketValueHigh), v))
	})
}

// MarketValueHighIsNil applies the IsNil predicate on the "market_value_high" field.
func MarketValueHighIsNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMarketValueHigh)))
	})
}

// MarketValueHighNotNil applies the NotNil predicate on the "market_value_high" field.
func MarketValueHighNotNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMarketValueHigh)))
	})
}

// MarketValueLowEQ applies the EQ predicate on the "market_value_low" field.
func MarketValueLowEQ(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowNEQ applies the NEQ predicate on the "market_value_low" field.
func MarketValueLowNEQ(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowIn applies the In predicate on the "market_value_low" field.
func MarketValueLowIn(vs ...decimal.Decimal) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMarketValueLow), v...))
	})
}

// MarketValueLowNotIn applies the NotIn predicate on the "market_value_low" field.
func MarketValueLowNotIn(vs ...decimal.Decimal) predicate.CurrencyValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMarketValueLow), v...))
	})
}

// MarketValueLowGT applies the GT predicate on the "market_value_low" field.
func MarketValueLowGT(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowGTE applies the GTE predicate on the "market_value_low" field.
func MarketValueLowGTE(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowLT applies the LT predicate on the "market_value_low" field.
func MarketValueLowLT(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowLTE applies the LTE predicate on the "market_value_low" field.
func MarketValueLowLTE(v decimal.Decimal) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketValueLow), v))
	})
}

// MarketValueLowIsNil applies the IsNil predicate on the "market_value_low" field.
func MarketValueLowIsNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMarketValueLow)))
	})
}

// MarketValueLowNotNil applies the NotNil predicate on the "market_value_low" field.
func MarketValueLowNotNil() predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMarketValueLow)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CurrencyValue) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CurrencyValue) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CurrencyValue) predicate.CurrencyValue {
	return predicate.CurrencyValue(func(s *sql.Selector) {
		p(s.Not())
	})
}
