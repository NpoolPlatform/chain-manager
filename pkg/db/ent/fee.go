// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/fee"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Fee is the model entity for the Fee schema.
type Fee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// FeeCoinTypeID holds the value of the "fee_coin_type_id" field.
	FeeCoinTypeID uuid.UUID `json:"fee_coin_type_id,omitempty"`
	// WithdrawFeeByStableUsd holds the value of the "withdraw_fee_by_stable_usd" field.
	WithdrawFeeByStableUsd bool `json:"withdraw_fee_by_stable_usd,omitempty"`
	// WithdrawFeeAmount holds the value of the "withdraw_fee_amount" field.
	WithdrawFeeAmount decimal.Decimal `json:"withdraw_fee_amount,omitempty"`
	// CollectFeeAmount holds the value of the "collect_fee_amount" field.
	CollectFeeAmount decimal.Decimal `json:"collect_fee_amount,omitempty"`
	// HotWalletFeeAmount holds the value of the "hot_wallet_fee_amount" field.
	HotWalletFeeAmount decimal.Decimal `json:"hot_wallet_fee_amount,omitempty"`
	// LowFeeAmount holds the value of the "low_fee_amount" field.
	LowFeeAmount decimal.Decimal `json:"low_fee_amount,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fee) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fee.FieldWithdrawFeeAmount, fee.FieldCollectFeeAmount, fee.FieldHotWalletFeeAmount, fee.FieldLowFeeAmount:
			values[i] = new(decimal.Decimal)
		case fee.FieldWithdrawFeeByStableUsd:
			values[i] = new(sql.NullBool)
		case fee.FieldCreatedAt, fee.FieldUpdatedAt, fee.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case fee.FieldID, fee.FieldCoinTypeID, fee.FieldFeeCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Fee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fee fields.
func (f *Fee) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case fee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = uint32(value.Int64)
			}
		case fee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = uint32(value.Int64)
			}
		case fee.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = uint32(value.Int64)
			}
		case fee.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				f.CoinTypeID = *value
			}
		case fee.FieldFeeCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fee_coin_type_id", values[i])
			} else if value != nil {
				f.FeeCoinTypeID = *value
			}
		case fee.FieldWithdrawFeeByStableUsd:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_fee_by_stable_usd", values[i])
			} else if value.Valid {
				f.WithdrawFeeByStableUsd = value.Bool
			}
		case fee.FieldWithdrawFeeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_fee_amount", values[i])
			} else if value != nil {
				f.WithdrawFeeAmount = *value
			}
		case fee.FieldCollectFeeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field collect_fee_amount", values[i])
			} else if value != nil {
				f.CollectFeeAmount = *value
			}
		case fee.FieldHotWalletFeeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field hot_wallet_fee_amount", values[i])
			} else if value != nil {
				f.HotWalletFeeAmount = *value
			}
		case fee.FieldLowFeeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field low_fee_amount", values[i])
			} else if value != nil {
				f.LowFeeAmount = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Fee.
// Note that you need to call Fee.Unwrap() before calling this method if this Fee
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fee) Update() *FeeUpdateOne {
	return (&FeeClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Fee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fee) Unwrap() *Fee {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fee is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fee) String() string {
	var builder strings.Builder
	builder.WriteString("Fee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", f.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", f.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("fee_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FeeCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("withdraw_fee_by_stable_usd=")
	builder.WriteString(fmt.Sprintf("%v", f.WithdrawFeeByStableUsd))
	builder.WriteString(", ")
	builder.WriteString("withdraw_fee_amount=")
	builder.WriteString(fmt.Sprintf("%v", f.WithdrawFeeAmount))
	builder.WriteString(", ")
	builder.WriteString("collect_fee_amount=")
	builder.WriteString(fmt.Sprintf("%v", f.CollectFeeAmount))
	builder.WriteString(", ")
	builder.WriteString("hot_wallet_fee_amount=")
	builder.WriteString(fmt.Sprintf("%v", f.HotWalletFeeAmount))
	builder.WriteString(", ")
	builder.WriteString("low_fee_amount=")
	builder.WriteString(fmt.Sprintf("%v", f.LowFeeAmount))
	builder.WriteByte(')')
	return builder.String()
}

// Fees is a parsable slice of Fee.
type Fees []*Fee

func (f Fees) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
